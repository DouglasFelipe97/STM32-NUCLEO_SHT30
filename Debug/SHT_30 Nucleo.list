
SHT_30 Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  08005038  08005038  00006038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005338  08005338  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005340  08005340  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005340  08005340  00006340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005344  08005344  00006344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005348  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000068  080053b0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080053b0  000072a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe08  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a37  00000000  00000000  00016ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  000198d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d40  00000000  00000000  0001aa18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288aa  00000000  00000000  0001b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015cd7  00000000  00000000  00044002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2a45  00000000  00000000  00059cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c71e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb8  00000000  00000000  0014c764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0015171c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005020 	.word	0x08005020

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005020 	.word	0x08005020

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <MX_GPIO_Init+0x44>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800027a:	4a0e      	ldr	r2, [pc, #56]	@ (80002b4 <MX_GPIO_Init+0x44>)
 800027c:	f043 0301 	orr.w	r3, r3, #1
 8000280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000282:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <MX_GPIO_Init+0x44>)
 8000284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	607b      	str	r3, [r7, #4]
 800028c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800028e:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <MX_GPIO_Init+0x44>)
 8000290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000292:	4a08      	ldr	r2, [pc, #32]	@ (80002b4 <MX_GPIO_Init+0x44>)
 8000294:	f043 0302 	orr.w	r3, r3, #2
 8000298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800029a:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <MX_GPIO_Init+0x44>)
 800029c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800029e:	f003 0302 	and.w	r3, r3, #2
 80002a2:	603b      	str	r3, [r7, #0]
 80002a4:	683b      	ldr	r3, [r7, #0]

}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40021000 	.word	0x40021000

080002b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002bc:	4b1b      	ldr	r3, [pc, #108]	@ (800032c <MX_I2C1_Init+0x74>)
 80002be:	4a1c      	ldr	r2, [pc, #112]	@ (8000330 <MX_I2C1_Init+0x78>)
 80002c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	@ (800032c <MX_I2C1_Init+0x74>)
 80002c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000334 <MX_I2C1_Init+0x7c>)
 80002c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002c8:	4b18      	ldr	r3, [pc, #96]	@ (800032c <MX_I2C1_Init+0x74>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ce:	4b17      	ldr	r3, [pc, #92]	@ (800032c <MX_I2C1_Init+0x74>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d4:	4b15      	ldr	r3, [pc, #84]	@ (800032c <MX_I2C1_Init+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002da:	4b14      	ldr	r3, [pc, #80]	@ (800032c <MX_I2C1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002e0:	4b12      	ldr	r3, [pc, #72]	@ (800032c <MX_I2C1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e6:	4b11      	ldr	r3, [pc, #68]	@ (800032c <MX_I2C1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002f2:	480e      	ldr	r0, [pc, #56]	@ (800032c <MX_I2C1_Init+0x74>)
 80002f4:	f000 fe22 	bl	8000f3c <HAL_I2C_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002fe:	f000 f8ef 	bl	80004e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000302:	2100      	movs	r1, #0
 8000304:	4809      	ldr	r0, [pc, #36]	@ (800032c <MX_I2C1_Init+0x74>)
 8000306:	f001 fba5 	bl	8001a54 <HAL_I2CEx_ConfigAnalogFilter>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000310:	f000 f8e6 	bl	80004e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000314:	2100      	movs	r1, #0
 8000316:	4805      	ldr	r0, [pc, #20]	@ (800032c <MX_I2C1_Init+0x74>)
 8000318:	f001 fbe7 	bl	8001aea <HAL_I2CEx_ConfigDigitalFilter>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000322:	f000 f8dd 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000084 	.word	0x20000084
 8000330:	40005400 	.word	0x40005400
 8000334:	10b17db5 	.word	0x10b17db5

08000338 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b0ac      	sub	sp, #176	@ 0xb0
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000340:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	f107 0314 	add.w	r3, r7, #20
 8000354:	2288      	movs	r2, #136	@ 0x88
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f003 fff0 	bl	800433e <memset>
  if(i2cHandle->Instance==I2C1)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a21      	ldr	r2, [pc, #132]	@ (80003e8 <HAL_I2C_MspInit+0xb0>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d13b      	bne.n	80003e0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000368:	2340      	movs	r3, #64	@ 0x40
 800036a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800036c:	2300      	movs	r3, #0
 800036e:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000370:	f107 0314 	add.w	r3, r7, #20
 8000374:	4618      	mov	r0, r3
 8000376:	f002 fa31 	bl	80027dc <HAL_RCCEx_PeriphCLKConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000380:	f000 f8ae 	bl	80004e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000384:	4b19      	ldr	r3, [pc, #100]	@ (80003ec <HAL_I2C_MspInit+0xb4>)
 8000386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000388:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <HAL_I2C_MspInit+0xb4>)
 800038a:	f043 0302 	orr.w	r3, r3, #2
 800038e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000390:	4b16      	ldr	r3, [pc, #88]	@ (80003ec <HAL_I2C_MspInit+0xb4>)
 8000392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000394:	f003 0302 	and.w	r3, r3, #2
 8000398:	613b      	str	r3, [r7, #16]
 800039a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800039c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80003a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003a4:	2312      	movs	r3, #18
 80003a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003b0:	2303      	movs	r3, #3
 80003b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80003b6:	2304      	movs	r3, #4
 80003b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003bc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80003c0:	4619      	mov	r1, r3
 80003c2:	480b      	ldr	r0, [pc, #44]	@ (80003f0 <HAL_I2C_MspInit+0xb8>)
 80003c4:	f000 fc10 	bl	8000be8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003c8:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <HAL_I2C_MspInit+0xb4>)
 80003ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003cc:	4a07      	ldr	r2, [pc, #28]	@ (80003ec <HAL_I2C_MspInit+0xb4>)
 80003ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80003d4:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <HAL_I2C_MspInit+0xb4>)
 80003d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003e0:	bf00      	nop
 80003e2:	37b0      	adds	r7, #176	@ 0xb0
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40005400 	.word	0x40005400
 80003ec:	40021000 	.word	0x40021000
 80003f0:	48000400 	.word	0x48000400

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fa4b 	bl	8000892 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f81e 	bl	800043c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f7ff ff36 	bl	8000270 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000404:	f7ff ff58 	bl	80002b8 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000408:	f000 f9a6 	bl	8000758 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	SensorSHT3X_Init(SHT30_I2C_ADDR);
 800040c:	2044      	movs	r0, #68	@ 0x44
 800040e:	f003 fb61 	bl	8003ad4 <SensorSHT3X_Init>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_Delay(2000);
 8000412:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000416:	f000 fab1 	bl	800097c <HAL_Delay>
		res = SensorSHT3X_Read((float *)&temperature, (float *)&humidity);
 800041a:	4905      	ldr	r1, [pc, #20]	@ (8000430 <main+0x3c>)
 800041c:	4805      	ldr	r0, [pc, #20]	@ (8000434 <main+0x40>)
 800041e:	f003 fba1 	bl	8003b64 <SensorSHT3X_Read>
 8000422:	4603      	mov	r3, r0
 8000424:	461a      	mov	r2, r3
 8000426:	4b04      	ldr	r3, [pc, #16]	@ (8000438 <main+0x44>)
 8000428:	701a      	strb	r2, [r3, #0]
		HAL_Delay(2000);
 800042a:	bf00      	nop
 800042c:	e7f1      	b.n	8000412 <main+0x1e>
 800042e:	bf00      	nop
 8000430:	200000e0 	.word	0x200000e0
 8000434:	200000dc 	.word	0x200000dc
 8000438:	200000d8 	.word	0x200000d8

0800043c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b096      	sub	sp, #88	@ 0x58
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0314 	add.w	r3, r7, #20
 8000446:	2244      	movs	r2, #68	@ 0x44
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f003 ff77 	bl	800433e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	463b      	mov	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800045e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000462:	f001 fb9d 	bl	8001ba0 <HAL_PWREx_ControlVoltageScaling>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800046c:	f000 f838 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000470:	2310      	movs	r3, #16
 8000472:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000474:	2301      	movs	r3, #1
 8000476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800047c:	2360      	movs	r3, #96	@ 0x60
 800047e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000480:	2302      	movs	r3, #2
 8000482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000484:	2301      	movs	r3, #1
 8000486:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000488:	2301      	movs	r3, #1
 800048a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 800048c:	2320      	movs	r3, #32
 800048e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000490:	2307      	movs	r3, #7
 8000492:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000494:	2302      	movs	r3, #2
 8000496:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000498:	2302      	movs	r3, #2
 800049a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 fbd3 	bl	8001c4c <HAL_RCC_OscConfig>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80004ac:	f000 f818 	bl	80004e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b0:	230f      	movs	r3, #15
 80004b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b4:	2303      	movs	r3, #3
 80004b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80004c4:	463b      	mov	r3, r7
 80004c6:	2103      	movs	r1, #3
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 ff9b 	bl	8002404 <HAL_RCC_ClockConfig>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80004d4:	f000 f804 	bl	80004e0 <Error_Handler>
  }
}
 80004d8:	bf00      	nop
 80004da:	3758      	adds	r7, #88	@ 0x58
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e4:	b672      	cpsid	i
}
 80004e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <Error_Handler+0x8>

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <HAL_MspInit+0x44>)
 80004f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000530 <HAL_MspInit+0x44>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <HAL_MspInit+0x44>)
 8000500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <HAL_MspInit+0x44>)
 800050c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800050e:	4a08      	ldr	r2, [pc, #32]	@ (8000530 <HAL_MspInit+0x44>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000514:	6593      	str	r3, [r2, #88]	@ 0x58
 8000516:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <HAL_MspInit+0x44>)
 8000518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800051a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40021000 	.word	0x40021000

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <NMI_Handler+0x4>

0800053c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <HardFault_Handler+0x4>

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <MemManage_Handler+0x4>

0800054c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <BusFault_Handler+0x4>

08000554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000558:	bf00      	nop
 800055a:	e7fd      	b.n	8000558 <UsageFault_Handler+0x4>

0800055c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr

0800056a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr

08000578 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058a:	f000 f9d7 	bl	800093c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <TIM3_IRQHandler+0x10>)
 800059a:	f002 fe32 	bl	8003202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	200000e8 	.word	0x200000e8

080005a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return 1;
 80005ac:	2301      	movs	r3, #1
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <_kill>:

int _kill(int pid, int sig)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80005c2:	f003 ff0b 	bl	80043dc <__errno>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2216      	movs	r2, #22
 80005ca:	601a      	str	r2, [r3, #0]
  return -1;
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <_exit>:

void _exit (int status)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80005e0:	f04f 31ff 	mov.w	r1, #4294967295
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff ffe7 	bl	80005b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80005ea:	bf00      	nop
 80005ec:	e7fd      	b.n	80005ea <_exit+0x12>

080005ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e00a      	b.n	8000616 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000600:	f3af 8000 	nop.w
 8000604:	4601      	mov	r1, r0
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	1c5a      	adds	r2, r3, #1
 800060a:	60ba      	str	r2, [r7, #8]
 800060c:	b2ca      	uxtb	r2, r1
 800060e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	3301      	adds	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	697a      	ldr	r2, [r7, #20]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	429a      	cmp	r2, r3
 800061c:	dbf0      	blt.n	8000600 <_read+0x12>
  }

  return len;
 800061e:	687b      	ldr	r3, [r7, #4]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	e009      	b.n	800064e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	1c5a      	adds	r2, r3, #1
 800063e:	60ba      	str	r2, [r7, #8]
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	3301      	adds	r3, #1
 800064c:	617b      	str	r3, [r7, #20]
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	429a      	cmp	r2, r3
 8000654:	dbf1      	blt.n	800063a <_write+0x12>
  }
  return len;
 8000656:	687b      	ldr	r3, [r7, #4]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <_close>:

int _close(int file)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000688:	605a      	str	r2, [r3, #4]
  return 0;
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <_isatty>:

int _isatty(int file)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006a0:	2301      	movs	r3, #1
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b085      	sub	sp, #20
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	60f8      	str	r0, [r7, #12]
 80006b6:	60b9      	str	r1, [r7, #8]
 80006b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006ba:	2300      	movs	r3, #0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006d0:	4a14      	ldr	r2, [pc, #80]	@ (8000724 <_sbrk+0x5c>)
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <_sbrk+0x60>)
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <_sbrk+0x64>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d102      	bne.n	80006ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <_sbrk+0x64>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	@ (8000730 <_sbrk+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <_sbrk+0x64>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4413      	add	r3, r2
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d207      	bcs.n	8000708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f8:	f003 fe70 	bl	80043dc <__errno>
 80006fc:	4603      	mov	r3, r0
 80006fe:	220c      	movs	r2, #12
 8000700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	e009      	b.n	800071c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000708:	4b08      	ldr	r3, [pc, #32]	@ (800072c <_sbrk+0x64>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070e:	4b07      	ldr	r3, [pc, #28]	@ (800072c <_sbrk+0x64>)
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	4a05      	ldr	r2, [pc, #20]	@ (800072c <_sbrk+0x64>)
 8000718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800071a:	68fb      	ldr	r3, [r7, #12]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20018000 	.word	0x20018000
 8000728:	00000400 	.word	0x00000400
 800072c:	200000e4 	.word	0x200000e4
 8000730:	200002a0 	.word	0x200002a0

08000734 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <SystemInit+0x20>)
 800073a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800073e:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <SystemInit+0x20>)
 8000740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000776:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_TIM3_Init+0x94>)
 8000778:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <MX_TIM3_Init+0x98>)
 800077a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 800077c:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_TIM3_Init+0x94>)
 800077e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000782:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_TIM3_Init+0x94>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63;
 800078a:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <MX_TIM3_Init+0x94>)
 800078c:	223f      	movs	r2, #63	@ 0x3f
 800078e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_TIM3_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_TIM3_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800079c:	4813      	ldr	r0, [pc, #76]	@ (80007ec <MX_TIM3_Init+0x94>)
 800079e:	f002 fcd9 	bl	8003154 <HAL_TIM_Base_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80007a8:	f7ff fe9a 	bl	80004e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	@ (80007ec <MX_TIM3_Init+0x94>)
 80007ba:	f002 fe29 	bl	8003410 <HAL_TIM_ConfigClockSource>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007c4:	f7ff fe8c 	bl	80004e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_TIM3_Init+0x94>)
 80007d6:	f003 f857 	bl	8003888 <HAL_TIMEx_MasterConfigSynchronization>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007e0:	f7ff fe7e 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200000e8 	.word	0x200000e8
 80007f0:	40000400 	.word	0x40000400

080007f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a0d      	ldr	r2, [pc, #52]	@ (8000838 <HAL_TIM_Base_MspInit+0x44>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d113      	bne.n	800082e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <HAL_TIM_Base_MspInit+0x48>)
 8000808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800080a:	4a0c      	ldr	r2, [pc, #48]	@ (800083c <HAL_TIM_Base_MspInit+0x48>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6593      	str	r3, [r2, #88]	@ 0x58
 8000812:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <HAL_TIM_Base_MspInit+0x48>)
 8000814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	201d      	movs	r0, #29
 8000824:	f000 f9a9 	bl	8000b7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000828:	201d      	movs	r0, #29
 800082a:	f000 f9c2 	bl	8000bb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800082e:	bf00      	nop
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40000400 	.word	0x40000400
 800083c:	40021000 	.word	0x40021000

08000840 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000878 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000844:	f7ff ff76 	bl	8000734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480c      	ldr	r0, [pc, #48]	@ (800087c <LoopForever+0x6>)
  ldr r1, =_edata
 800084a:	490d      	ldr	r1, [pc, #52]	@ (8000880 <LoopForever+0xa>)
  ldr r2, =_sidata
 800084c:	4a0d      	ldr	r2, [pc, #52]	@ (8000884 <LoopForever+0xe>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a0a      	ldr	r2, [pc, #40]	@ (8000888 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000860:	4c0a      	ldr	r4, [pc, #40]	@ (800088c <LoopForever+0x16>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086e:	f003 fdbb 	bl	80043e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000872:	f7ff fdbf 	bl	80003f4 <main>

08000876 <LoopForever>:

LoopForever:
    b LoopForever
 8000876:	e7fe      	b.n	8000876 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000878:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800087c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000880:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000884:	08005348 	.word	0x08005348
  ldr r2, =_sbss
 8000888:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800088c:	200002a0 	.word	0x200002a0

08000890 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000890:	e7fe      	b.n	8000890 <ADC1_2_IRQHandler>

08000892 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000898:	2300      	movs	r3, #0
 800089a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800089c:	2003      	movs	r0, #3
 800089e:	f000 f961 	bl	8000b64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a2:	200f      	movs	r0, #15
 80008a4:	f000 f80e 	bl	80008c4 <HAL_InitTick>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	e001      	b.n	80008b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b4:	f7ff fe1a 	bl	80004ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008b8:	79fb      	ldrb	r3, [r7, #7]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b084      	sub	sp, #16
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008cc:	2300      	movs	r3, #0
 80008ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <HAL_InitTick+0x6c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d023      	beq.n	8000920 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80008d8:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <HAL_InitTick+0x70>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <HAL_InitTick+0x6c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f96d 	bl	8000bce <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10f      	bne.n	800091a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2b0f      	cmp	r3, #15
 80008fe:	d809      	bhi.n	8000914 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	f04f 30ff 	mov.w	r0, #4294967295
 8000908:	f000 f937 	bl	8000b7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090c:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_InitTick+0x74>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6013      	str	r3, [r2, #0]
 8000912:	e007      	b.n	8000924 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
 8000918:	e004      	b.n	8000924 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	73fb      	strb	r3, [r7, #15]
 800091e:	e001      	b.n	8000924 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000920:	2301      	movs	r3, #1
 8000922:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000008 	.word	0x20000008
 8000934:	20000000 	.word	0x20000000
 8000938:	20000004 	.word	0x20000004

0800093c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000940:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_IncTick+0x20>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	461a      	mov	r2, r3
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_IncTick+0x24>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4413      	add	r3, r2
 800094c:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <HAL_IncTick+0x24>)
 800094e:	6013      	str	r3, [r2, #0]
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000008 	.word	0x20000008
 8000960:	20000134 	.word	0x20000134

08000964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <HAL_GetTick+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000134 	.word	0x20000134

0800097c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000984:	f7ff ffee 	bl	8000964 <HAL_GetTick>
 8000988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000994:	d005      	beq.n	80009a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <HAL_Delay+0x44>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4413      	add	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009a2:	bf00      	nop
 80009a4:	f7ff ffde 	bl	8000964 <HAL_GetTick>
 80009a8:	4602      	mov	r2, r0
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d8f7      	bhi.n	80009a4 <HAL_Delay+0x28>
  {
  }
}
 80009b4:	bf00      	nop
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	db0b      	blt.n	8000a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 021f 	and.w	r2, r3, #31
 8000a40:	4907      	ldr	r1, [pc, #28]	@ (8000a60 <__NVIC_EnableIRQ+0x38>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	2001      	movs	r0, #1
 8000a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	@ (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	@ (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	@ 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b30:	d301      	bcc.n	8000b36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00f      	b.n	8000b56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b36:	4a0a      	ldr	r2, [pc, #40]	@ (8000b60 <SysTick_Config+0x40>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f7ff ff8e 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b48:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <SysTick_Config+0x40>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4e:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <SysTick_Config+0x40>)
 8000b50:	2207      	movs	r2, #7
 8000b52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ff29 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b086      	sub	sp, #24
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8c:	f7ff ff3e 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	68b9      	ldr	r1, [r7, #8]
 8000b96:	6978      	ldr	r0, [r7, #20]
 8000b98:	f7ff ff8e 	bl	8000ab8 <NVIC_EncodePriority>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba2:	4611      	mov	r1, r2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff ff5d 	bl	8000a64 <__NVIC_SetPriority>
}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b082      	sub	sp, #8
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	4603      	mov	r3, r0
 8000bba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff31 	bl	8000a28 <__NVIC_EnableIRQ>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b082      	sub	sp, #8
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ffa2 	bl	8000b20 <SysTick_Config>
 8000bdc:	4603      	mov	r3, r0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b087      	sub	sp, #28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf6:	e17f      	b.n	8000ef8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f000 8171 	beq.w	8000ef2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 0303 	and.w	r3, r3, #3
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d005      	beq.n	8000c28 <HAL_GPIO_Init+0x40>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d130      	bne.n	8000c8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	2203      	movs	r2, #3
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c5e:	2201      	movs	r2, #1
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	091b      	lsrs	r3, r3, #4
 8000c74:	f003 0201 	and.w	r2, r3, #1
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d118      	bne.n	8000cc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d017      	beq.n	8000d04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d123      	bne.n	8000d58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	691a      	ldr	r2, [r3, #16]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	6939      	ldr	r1, [r7, #16]
 8000d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0203 	and.w	r2, r3, #3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80ac 	beq.w	8000ef2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f18 <HAL_GPIO_Init+0x330>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	4a5e      	ldr	r2, [pc, #376]	@ (8000f18 <HAL_GPIO_Init+0x330>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000da6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f18 <HAL_GPIO_Init+0x330>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000db2:	4a5a      	ldr	r2, [pc, #360]	@ (8000f1c <HAL_GPIO_Init+0x334>)
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3302      	adds	r3, #2
 8000dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ddc:	d025      	beq.n	8000e2a <HAL_GPIO_Init+0x242>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f20 <HAL_GPIO_Init+0x338>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d01f      	beq.n	8000e26 <HAL_GPIO_Init+0x23e>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4e      	ldr	r2, [pc, #312]	@ (8000f24 <HAL_GPIO_Init+0x33c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d019      	beq.n	8000e22 <HAL_GPIO_Init+0x23a>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4d      	ldr	r2, [pc, #308]	@ (8000f28 <HAL_GPIO_Init+0x340>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d013      	beq.n	8000e1e <HAL_GPIO_Init+0x236>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4c      	ldr	r2, [pc, #304]	@ (8000f2c <HAL_GPIO_Init+0x344>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d00d      	beq.n	8000e1a <HAL_GPIO_Init+0x232>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4b      	ldr	r2, [pc, #300]	@ (8000f30 <HAL_GPIO_Init+0x348>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d007      	beq.n	8000e16 <HAL_GPIO_Init+0x22e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4a      	ldr	r2, [pc, #296]	@ (8000f34 <HAL_GPIO_Init+0x34c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_GPIO_Init+0x22a>
 8000e0e:	2306      	movs	r3, #6
 8000e10:	e00c      	b.n	8000e2c <HAL_GPIO_Init+0x244>
 8000e12:	2307      	movs	r3, #7
 8000e14:	e00a      	b.n	8000e2c <HAL_GPIO_Init+0x244>
 8000e16:	2305      	movs	r3, #5
 8000e18:	e008      	b.n	8000e2c <HAL_GPIO_Init+0x244>
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	e006      	b.n	8000e2c <HAL_GPIO_Init+0x244>
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e004      	b.n	8000e2c <HAL_GPIO_Init+0x244>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e002      	b.n	8000e2c <HAL_GPIO_Init+0x244>
 8000e26:	2301      	movs	r3, #1
 8000e28:	e000      	b.n	8000e2c <HAL_GPIO_Init+0x244>
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	f002 0203 	and.w	r2, r2, #3
 8000e32:	0092      	lsls	r2, r2, #2
 8000e34:	4093      	lsls	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e3c:	4937      	ldr	r1, [pc, #220]	@ (8000f1c <HAL_GPIO_Init+0x334>)
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	3302      	adds	r3, #2
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f38 <HAL_GPIO_Init+0x350>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e6e:	4a32      	ldr	r2, [pc, #200]	@ (8000f38 <HAL_GPIO_Init+0x350>)
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e74:	4b30      	ldr	r3, [pc, #192]	@ (8000f38 <HAL_GPIO_Init+0x350>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4013      	ands	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e98:	4a27      	ldr	r2, [pc, #156]	@ (8000f38 <HAL_GPIO_Init+0x350>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <HAL_GPIO_Init+0x350>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8000f38 <HAL_GPIO_Init+0x350>)
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <HAL_GPIO_Init+0x350>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eec:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <HAL_GPIO_Init+0x350>)
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa22 f303 	lsr.w	r3, r2, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f47f ae78 	bne.w	8000bf8 <HAL_GPIO_Init+0x10>
  }
}
 8000f08:	bf00      	nop
 8000f0a:	bf00      	nop
 8000f0c:	371c      	adds	r7, #28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48000c00 	.word	0x48000c00
 8000f2c:	48001000 	.word	0x48001000
 8000f30:	48001400 	.word	0x48001400
 8000f34:	48001800 	.word	0x48001800
 8000f38:	40010400 	.word	0x40010400

08000f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e08d      	b.n	800106a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d106      	bne.n	8000f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff f9e8 	bl	8000338 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2224      	movs	r2, #36	@ 0x24
 8000f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0201 	bic.w	r2, r2, #1
 8000f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685a      	ldr	r2, [r3, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d107      	bne.n	8000fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	e006      	b.n	8000fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d108      	bne.n	8000fde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	e007      	b.n	8000fee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	6812      	ldr	r2, [r2, #0]
 8000ff8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ffc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	699b      	ldr	r3, [r3, #24]
 8001022:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	430a      	orrs	r2, r1
 800102a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69d9      	ldr	r1, [r3, #28]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1a      	ldr	r2, [r3, #32]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0201 	orr.w	r2, r2, #1
 800104a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2220      	movs	r2, #32
 8001056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af02      	add	r7, sp, #8
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	4608      	mov	r0, r1
 800107e:	4611      	mov	r1, r2
 8001080:	461a      	mov	r2, r3
 8001082:	4603      	mov	r3, r0
 8001084:	817b      	strh	r3, [r7, #10]
 8001086:	460b      	mov	r3, r1
 8001088:	813b      	strh	r3, [r7, #8]
 800108a:	4613      	mov	r3, r2
 800108c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b20      	cmp	r3, #32
 8001098:	f040 80f9 	bne.w	800128e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800109c:	6a3b      	ldr	r3, [r7, #32]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d002      	beq.n	80010a8 <HAL_I2C_Mem_Write+0x34>
 80010a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d105      	bne.n	80010b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e0ed      	b.n	8001290 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_I2C_Mem_Write+0x4e>
 80010be:	2302      	movs	r3, #2
 80010c0:	e0e6      	b.n	8001290 <HAL_I2C_Mem_Write+0x21c>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80010ca:	f7ff fc4b 	bl	8000964 <HAL_GetTick>
 80010ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2319      	movs	r3, #25
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f000 fac3 	bl	8001668 <I2C_WaitOnFlagUntilTimeout>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0d1      	b.n	8001290 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2221      	movs	r2, #33	@ 0x21
 80010f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	2240      	movs	r2, #64	@ 0x40
 80010f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6a3a      	ldr	r2, [r7, #32]
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800110c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001114:	88f8      	ldrh	r0, [r7, #6]
 8001116:	893a      	ldrh	r2, [r7, #8]
 8001118:	8979      	ldrh	r1, [r7, #10]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	4603      	mov	r3, r0
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f000 f9d3 	bl	80014d0 <I2C_RequestMemoryWrite>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d005      	beq.n	800113c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e0a9      	b.n	8001290 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001140:	b29b      	uxth	r3, r3
 8001142:	2bff      	cmp	r3, #255	@ 0xff
 8001144:	d90e      	bls.n	8001164 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	22ff      	movs	r2, #255	@ 0xff
 800114a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001150:	b2da      	uxtb	r2, r3
 8001152:	8979      	ldrh	r1, [r7, #10]
 8001154:	2300      	movs	r3, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f000 fc47 	bl	80019f0 <I2C_TransferConfig>
 8001162:	e00f      	b.n	8001184 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001168:	b29a      	uxth	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001172:	b2da      	uxtb	r2, r3
 8001174:	8979      	ldrh	r1, [r7, #10]
 8001176:	2300      	movs	r3, #0
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800117e:	68f8      	ldr	r0, [r7, #12]
 8001180:	f000 fc36 	bl	80019f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001184:	697a      	ldr	r2, [r7, #20]
 8001186:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001188:	68f8      	ldr	r0, [r7, #12]
 800118a:	f000 fac6 	bl	800171a <I2C_WaitOnTXISFlagUntilTimeout>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e07b      	b.n	8001290 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3b01      	subs	r3, #1
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011c0:	3b01      	subs	r3, #1
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d034      	beq.n	800123c <HAL_I2C_Mem_Write+0x1c8>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d130      	bne.n	800123c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e0:	2200      	movs	r2, #0
 80011e2:	2180      	movs	r1, #128	@ 0x80
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f000 fa3f 	bl	8001668 <I2C_WaitOnFlagUntilTimeout>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e04d      	b.n	8001290 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	2bff      	cmp	r3, #255	@ 0xff
 80011fc:	d90e      	bls.n	800121c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	22ff      	movs	r2, #255	@ 0xff
 8001202:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001208:	b2da      	uxtb	r2, r3
 800120a:	8979      	ldrh	r1, [r7, #10]
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 fbeb 	bl	80019f0 <I2C_TransferConfig>
 800121a:	e00f      	b.n	800123c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001220:	b29a      	uxth	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800122a:	b2da      	uxtb	r2, r3
 800122c:	8979      	ldrh	r1, [r7, #10]
 800122e:	2300      	movs	r3, #0
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f000 fbda 	bl	80019f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001240:	b29b      	uxth	r3, r3
 8001242:	2b00      	cmp	r3, #0
 8001244:	d19e      	bne.n	8001184 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800124a:	68f8      	ldr	r0, [r7, #12]
 800124c:	f000 faac 	bl	80017a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e01a      	b.n	8001290 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2220      	movs	r2, #32
 8001260:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_I2C_Mem_Write+0x224>)
 800126e:	400b      	ands	r3, r1
 8001270:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2220      	movs	r2, #32
 8001276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	e000      	b.n	8001290 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800128e:	2302      	movs	r3, #2
  }
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	fe00e800 	.word	0xfe00e800

0800129c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	817b      	strh	r3, [r7, #10]
 80012ae:	460b      	mov	r3, r1
 80012b0:	813b      	strh	r3, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b20      	cmp	r3, #32
 80012c0:	f040 80fd 	bne.w	80014be <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80012c4:	6a3b      	ldr	r3, [r7, #32]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <HAL_I2C_Mem_Read+0x34>
 80012ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d105      	bne.n	80012dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0f1      	b.n	80014c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <HAL_I2C_Mem_Read+0x4e>
 80012e6:	2302      	movs	r3, #2
 80012e8:	e0ea      	b.n	80014c0 <HAL_I2C_Mem_Read+0x224>
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012f2:	f7ff fb37 	bl	8000964 <HAL_GetTick>
 80012f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2319      	movs	r3, #25
 80012fe:	2201      	movs	r2, #1
 8001300:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001304:	68f8      	ldr	r0, [r7, #12]
 8001306:	f000 f9af 	bl	8001668 <I2C_WaitOnFlagUntilTimeout>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e0d5      	b.n	80014c0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2222      	movs	r2, #34	@ 0x22
 8001318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2240      	movs	r2, #64	@ 0x40
 8001320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2200      	movs	r2, #0
 8001328:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6a3a      	ldr	r2, [r7, #32]
 800132e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001334:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800133c:	88f8      	ldrh	r0, [r7, #6]
 800133e:	893a      	ldrh	r2, [r7, #8]
 8001340:	8979      	ldrh	r1, [r7, #10]
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	4603      	mov	r3, r0
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f000 f913 	bl	8001578 <I2C_RequestMemoryRead>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e0ad      	b.n	80014c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001368:	b29b      	uxth	r3, r3
 800136a:	2bff      	cmp	r3, #255	@ 0xff
 800136c:	d90e      	bls.n	800138c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2201      	movs	r2, #1
 8001372:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001378:	b2da      	uxtb	r2, r3
 800137a:	8979      	ldrh	r1, [r7, #10]
 800137c:	4b52      	ldr	r3, [pc, #328]	@ (80014c8 <HAL_I2C_Mem_Read+0x22c>)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 fb33 	bl	80019f0 <I2C_TransferConfig>
 800138a:	e00f      	b.n	80013ac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001390:	b29a      	uxth	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800139a:	b2da      	uxtb	r2, r3
 800139c:	8979      	ldrh	r1, [r7, #10]
 800139e:	4b4a      	ldr	r3, [pc, #296]	@ (80014c8 <HAL_I2C_Mem_Read+0x22c>)
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 fb22 	bl	80019f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b2:	2200      	movs	r2, #0
 80013b4:	2104      	movs	r1, #4
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f000 f956 	bl	8001668 <I2C_WaitOnFlagUntilTimeout>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e07c      	b.n	80014c0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	3b01      	subs	r3, #1
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d034      	beq.n	800146c <HAL_I2C_Mem_Read+0x1d0>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001406:	2b00      	cmp	r3, #0
 8001408:	d130      	bne.n	800146c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001410:	2200      	movs	r2, #0
 8001412:	2180      	movs	r1, #128	@ 0x80
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 f927 	bl	8001668 <I2C_WaitOnFlagUntilTimeout>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001420:	2301      	movs	r3, #1
 8001422:	e04d      	b.n	80014c0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001428:	b29b      	uxth	r3, r3
 800142a:	2bff      	cmp	r3, #255	@ 0xff
 800142c:	d90e      	bls.n	800144c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2201      	movs	r2, #1
 8001432:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001438:	b2da      	uxtb	r2, r3
 800143a:	8979      	ldrh	r1, [r7, #10]
 800143c:	2300      	movs	r3, #0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001444:	68f8      	ldr	r0, [r7, #12]
 8001446:	f000 fad3 	bl	80019f0 <I2C_TransferConfig>
 800144a:	e00f      	b.n	800146c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001450:	b29a      	uxth	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800145a:	b2da      	uxtb	r2, r3
 800145c:	8979      	ldrh	r1, [r7, #10]
 800145e:	2300      	movs	r3, #0
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f000 fac2 	bl	80019f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001470:	b29b      	uxth	r3, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	d19a      	bne.n	80013ac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f994 	bl	80017a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e01a      	b.n	80014c0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2220      	movs	r2, #32
 8001490:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <HAL_I2C_Mem_Read+0x230>)
 800149e:	400b      	ands	r3, r1
 80014a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2220      	movs	r2, #32
 80014a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e000      	b.n	80014c0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80014be:	2302      	movs	r3, #2
  }
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	80002400 	.word	0x80002400
 80014cc:	fe00e800 	.word	0xfe00e800

080014d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4603      	mov	r3, r0
 80014e0:	817b      	strh	r3, [r7, #10]
 80014e2:	460b      	mov	r3, r1
 80014e4:	813b      	strh	r3, [r7, #8]
 80014e6:	4613      	mov	r3, r2
 80014e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	8979      	ldrh	r1, [r7, #10]
 80014f0:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <I2C_RequestMemoryWrite+0xa4>)
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 fa79 	bl	80019f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	69b9      	ldr	r1, [r7, #24]
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f909 	bl	800171a <I2C_WaitOnTXISFlagUntilTimeout>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e02c      	b.n	800156c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001518:	893b      	ldrh	r3, [r7, #8]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	629a      	str	r2, [r3, #40]	@ 0x28
 8001522:	e015      	b.n	8001550 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001524:	893b      	ldrh	r3, [r7, #8]
 8001526:	0a1b      	lsrs	r3, r3, #8
 8001528:	b29b      	uxth	r3, r3
 800152a:	b2da      	uxtb	r2, r3
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	69b9      	ldr	r1, [r7, #24]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	f000 f8ef 	bl	800171a <I2C_WaitOnTXISFlagUntilTimeout>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e012      	b.n	800156c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001546:	893b      	ldrh	r3, [r7, #8]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	2200      	movs	r2, #0
 8001558:	2180      	movs	r1, #128	@ 0x80
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f000 f884 	bl	8001668 <I2C_WaitOnFlagUntilTimeout>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	80002000 	.word	0x80002000

08001578 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	4608      	mov	r0, r1
 8001582:	4611      	mov	r1, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4603      	mov	r3, r0
 8001588:	817b      	strh	r3, [r7, #10]
 800158a:	460b      	mov	r3, r1
 800158c:	813b      	strh	r3, [r7, #8]
 800158e:	4613      	mov	r3, r2
 8001590:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	8979      	ldrh	r1, [r7, #10]
 8001598:	4b20      	ldr	r3, [pc, #128]	@ (800161c <I2C_RequestMemoryRead+0xa4>)
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f000 fa26 	bl	80019f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	69b9      	ldr	r1, [r7, #24]
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f000 f8b6 	bl	800171a <I2C_WaitOnTXISFlagUntilTimeout>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e02c      	b.n	8001612 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d105      	bne.n	80015ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015be:	893b      	ldrh	r3, [r7, #8]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80015c8:	e015      	b.n	80015f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80015ca:	893b      	ldrh	r3, [r7, #8]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	69b9      	ldr	r1, [r7, #24]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f000 f89c 	bl	800171a <I2C_WaitOnTXISFlagUntilTimeout>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e012      	b.n	8001612 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80015ec:	893b      	ldrh	r3, [r7, #8]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2200      	movs	r2, #0
 80015fe:	2140      	movs	r1, #64	@ 0x40
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f831 	bl	8001668 <I2C_WaitOnFlagUntilTimeout>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	80002000 	.word	0x80002000

08001620 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b02      	cmp	r3, #2
 8001634:	d103      	bne.n	800163e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2200      	movs	r2, #0
 800163c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b01      	cmp	r3, #1
 800164a:	d007      	beq.n	800165c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	619a      	str	r2, [r3, #24]
  }
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001678:	e03b      	b.n	80016f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	6839      	ldr	r1, [r7, #0]
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f000 f8d6 	bl	8001830 <I2C_IsErrorOccurred>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e041      	b.n	8001712 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d02d      	beq.n	80016f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001696:	f7ff f965 	bl	8000964 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d302      	bcc.n	80016ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d122      	bne.n	80016f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699a      	ldr	r2, [r3, #24]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	4013      	ands	r3, r2
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d113      	bne.n	80016f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f043 0220 	orr.w	r2, r3, #32
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2220      	movs	r2, #32
 80016da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00f      	b.n	8001712 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	4013      	ands	r3, r2
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	429a      	cmp	r2, r3
 8001700:	bf0c      	ite	eq
 8001702:	2301      	moveq	r3, #1
 8001704:	2300      	movne	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	429a      	cmp	r2, r3
 800170e:	d0b4      	beq.n	800167a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001726:	e033      	b.n	8001790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 f87f 	bl	8001830 <I2C_IsErrorOccurred>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e031      	b.n	80017a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001742:	d025      	beq.n	8001790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001744:	f7ff f90e 	bl	8000964 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	d302      	bcc.n	800175a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d11a      	bne.n	8001790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b02      	cmp	r3, #2
 8001766:	d013      	beq.n	8001790 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176c:	f043 0220 	orr.w	r2, r3, #32
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2220      	movs	r2, #32
 8001778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e007      	b.n	80017a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b02      	cmp	r3, #2
 800179c:	d1c4      	bne.n	8001728 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017b4:	e02f      	b.n	8001816 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f838 	bl	8001830 <I2C_IsErrorOccurred>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e02d      	b.n	8001826 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017ca:	f7ff f8cb 	bl	8000964 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d302      	bcc.n	80017e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d11a      	bne.n	8001816 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 0320 	and.w	r3, r3, #32
 80017ea:	2b20      	cmp	r3, #32
 80017ec:	d013      	beq.n	8001816 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	f043 0220 	orr.w	r2, r3, #32
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2220      	movs	r2, #32
 80017fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e007      	b.n	8001826 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	2b20      	cmp	r3, #32
 8001822:	d1c8      	bne.n	80017b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	2b00      	cmp	r3, #0
 800185a:	d068      	beq.n	800192e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2210      	movs	r2, #16
 8001862:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001864:	e049      	b.n	80018fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d045      	beq.n	80018fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800186e:	f7ff f879 	bl	8000964 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	d302      	bcc.n	8001884 <I2C_IsErrorOccurred+0x54>
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d13a      	bne.n	80018fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001896:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018a6:	d121      	bne.n	80018ec <I2C_IsErrorOccurred+0xbc>
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80018ae:	d01d      	beq.n	80018ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80018b0:	7cfb      	ldrb	r3, [r7, #19]
 80018b2:	2b20      	cmp	r3, #32
 80018b4:	d01a      	beq.n	80018ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80018c6:	f7ff f84d 	bl	8000964 <HAL_GetTick>
 80018ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018cc:	e00e      	b.n	80018ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80018ce:	f7ff f849 	bl	8000964 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b19      	cmp	r3, #25
 80018da:	d907      	bls.n	80018ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f043 0320 	orr.w	r3, r3, #32
 80018e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80018ea:	e006      	b.n	80018fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0320 	and.w	r3, r3, #32
 80018f6:	2b20      	cmp	r3, #32
 80018f8:	d1e9      	bne.n	80018ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b20      	cmp	r3, #32
 8001906:	d003      	beq.n	8001910 <I2C_IsErrorOccurred+0xe0>
 8001908:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0aa      	beq.n	8001866 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001910:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001914:	2b00      	cmp	r3, #0
 8001916:	d103      	bne.n	8001920 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2220      	movs	r2, #32
 800191e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00b      	beq.n	8001958 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001950:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00b      	beq.n	800197a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001972:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00b      	beq.n	800199c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001994:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800199c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d01c      	beq.n	80019de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fe3b 	bl	8001620 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <I2C_IsErrorOccurred+0x1bc>)
 80019b6:	400b      	ands	r3, r1
 80019b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80019de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3728      	adds	r7, #40	@ 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	fe00e800 	.word	0xfe00e800

080019f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	460b      	mov	r3, r1
 80019fc:	817b      	strh	r3, [r7, #10]
 80019fe:	4613      	mov	r3, r2
 8001a00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a02:	897b      	ldrh	r3, [r7, #10]
 8001a04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a08:	7a7b      	ldrb	r3, [r7, #9]
 8001a0a:	041b      	lsls	r3, r3, #16
 8001a0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001a1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	0d5b      	lsrs	r3, r3, #21
 8001a2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001a2e:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <I2C_TransferConfig+0x60>)
 8001a30:	430b      	orrs	r3, r1
 8001a32:	43db      	mvns	r3, r3
 8001a34:	ea02 0103 	and.w	r1, r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a42:	bf00      	nop
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	03ff63ff 	.word	0x03ff63ff

08001a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b20      	cmp	r3, #32
 8001a68:	d138      	bne.n	8001adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e032      	b.n	8001ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2224      	movs	r2, #36	@ 0x24
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0201 	bic.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6819      	ldr	r1, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2220      	movs	r2, #32
 8001acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	e000      	b.n	8001ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001adc:	2302      	movs	r3, #2
  }
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b20      	cmp	r3, #32
 8001afe:	d139      	bne.n	8001b74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e033      	b.n	8001b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2224      	movs	r2, #36	@ 0x24
 8001b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0201 	bic.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0201 	orr.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b70:	2300      	movs	r3, #0
 8001b72:	e000      	b.n	8001b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b74:	2302      	movs	r3, #2
  }
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40007000 	.word	0x40007000

08001ba0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bae:	d130      	bne.n	8001c12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bb0:	4b23      	ldr	r3, [pc, #140]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bbc:	d038      	beq.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbe:	4b20      	ldr	r3, [pc, #128]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bcc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	@ (8001c44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2232      	movs	r2, #50	@ 0x32
 8001bd4:	fb02 f303 	mul.w	r3, r2, r3
 8001bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bda:	fba2 2303 	umull	r2, r3, r2, r3
 8001bde:	0c9b      	lsrs	r3, r3, #18
 8001be0:	3301      	adds	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be4:	e002      	b.n	8001bec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3b01      	subs	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bec:	4b14      	ldr	r3, [pc, #80]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf8:	d102      	bne.n	8001c00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1f2      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c00:	4b0f      	ldr	r3, [pc, #60]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0c:	d110      	bne.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e00f      	b.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c1e:	d007      	beq.n	8001c30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c20:	4b07      	ldr	r3, [pc, #28]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c28:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40007000 	.word	0x40007000
 8001c44:	20000000 	.word	0x20000000
 8001c48:	431bde83 	.word	0x431bde83

08001c4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e3ca      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5e:	4b97      	ldr	r3, [pc, #604]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c68:	4b94      	ldr	r3, [pc, #592]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80e4 	beq.w	8001e48 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d007      	beq.n	8001c96 <HAL_RCC_OscConfig+0x4a>
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	f040 808b 	bne.w	8001da4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	f040 8087 	bne.w	8001da4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c96:	4b89      	ldr	r3, [pc, #548]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_RCC_OscConfig+0x62>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e3a2      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1a      	ldr	r2, [r3, #32]
 8001cb2:	4b82      	ldr	r3, [pc, #520]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d004      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x7c>
 8001cbe:	4b7f      	ldr	r3, [pc, #508]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCC_OscConfig+0x88>
 8001cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cce:	091b      	lsrs	r3, r3, #4
 8001cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d223      	bcs.n	8001d20 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fd1d 	bl	800271c <RCC_SetFlashLatencyFromMSIRange>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e383      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cec:	4b73      	ldr	r3, [pc, #460]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a72      	ldr	r2, [pc, #456]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b70      	ldr	r3, [pc, #448]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	496d      	ldr	r1, [pc, #436]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	4968      	ldr	r1, [pc, #416]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	604b      	str	r3, [r1, #4]
 8001d1e:	e025      	b.n	8001d6c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d20:	4b66      	ldr	r3, [pc, #408]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a65      	ldr	r2, [pc, #404]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b63      	ldr	r3, [pc, #396]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	4960      	ldr	r1, [pc, #384]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d3e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	495b      	ldr	r1, [pc, #364]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d109      	bne.n	8001d6c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fcdd 	bl	800271c <RCC_SetFlashLatencyFromMSIRange>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e343      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d6c:	f000 fc4a 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b52      	ldr	r3, [pc, #328]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	4950      	ldr	r1, [pc, #320]	@ (8001ec0 <HAL_RCC_OscConfig+0x274>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	4a4e      	ldr	r2, [pc, #312]	@ (8001ec4 <HAL_RCC_OscConfig+0x278>)
 8001d8a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d8c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ec8 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fd97 	bl	80008c4 <HAL_InitTick>
 8001d96:	4603      	mov	r3, r0
 8001d98:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d052      	beq.n	8001e46 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	e327      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d032      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dac:	4b43      	ldr	r3, [pc, #268]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a42      	ldr	r2, [pc, #264]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001db8:	f7fe fdd4 	bl	8000964 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc0:	f7fe fdd0 	bl	8000964 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e310      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dde:	4b37      	ldr	r3, [pc, #220]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a36      	ldr	r2, [pc, #216]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4b34      	ldr	r3, [pc, #208]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4931      	ldr	r1, [pc, #196]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	492c      	ldr	r1, [pc, #176]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
 8001e10:	e01a      	b.n	8001e48 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e12:	4b2a      	ldr	r3, [pc, #168]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a29      	ldr	r2, [pc, #164]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e1e:	f7fe fda1 	bl	8000964 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e26:	f7fe fd9d 	bl	8000964 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e2dd      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e38:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f0      	bne.n	8001e26 <HAL_RCC_OscConfig+0x1da>
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d074      	beq.n	8001f3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d005      	beq.n	8001e66 <HAL_RCC_OscConfig+0x21a>
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d10e      	bne.n	8001e7e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d10b      	bne.n	8001e7e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d064      	beq.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d160      	bne.n	8001f3c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e2ba      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x24a>
 8001e88:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001e8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	e026      	b.n	8001ee4 <HAL_RCC_OscConfig+0x298>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e9e:	d115      	bne.n	8001ecc <HAL_RCC_OscConfig+0x280>
 8001ea0:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a05      	ldr	r2, [pc, #20]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001ea6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a02      	ldr	r2, [pc, #8]	@ (8001ebc <HAL_RCC_OscConfig+0x270>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e014      	b.n	8001ee4 <HAL_RCC_OscConfig+0x298>
 8001eba:	bf00      	nop
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	08005264 	.word	0x08005264
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	4ba0      	ldr	r3, [pc, #640]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a9f      	ldr	r2, [pc, #636]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b9d      	ldr	r3, [pc, #628]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a9c      	ldr	r2, [pc, #624]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7fe fd3a 	bl	8000964 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7fe fd36 	bl	8000964 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	@ 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e276      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f06:	4b92      	ldr	r3, [pc, #584]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x2a8>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f14:	f7fe fd26 	bl	8000964 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7fe fd22 	bl	8000964 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	@ 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e262      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f2e:	4b88      	ldr	r3, [pc, #544]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2d0>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d060      	beq.n	800200c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d005      	beq.n	8001f5c <HAL_RCC_OscConfig+0x310>
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d119      	bne.n	8001f8a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d116      	bne.n	8001f8a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	4b7c      	ldr	r3, [pc, #496]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_OscConfig+0x328>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e23f      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b76      	ldr	r3, [pc, #472]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	4973      	ldr	r1, [pc, #460]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f88:	e040      	b.n	800200c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d023      	beq.n	8001fda <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f92:	4b6f      	ldr	r3, [pc, #444]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a6e      	ldr	r2, [pc, #440]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7fe fce1 	bl	8000964 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7fe fcdd 	bl	8000964 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e21d      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb8:	4b65      	ldr	r3, [pc, #404]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b62      	ldr	r3, [pc, #392]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	495f      	ldr	r1, [pc, #380]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]
 8001fd8:	e018      	b.n	800200c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4b5d      	ldr	r3, [pc, #372]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a5c      	ldr	r2, [pc, #368]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8001fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fcbd 	bl	8000964 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fee:	f7fe fcb9 	bl	8000964 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e1f9      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002000:	4b53      	ldr	r3, [pc, #332]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1f0      	bne.n	8001fee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b00      	cmp	r3, #0
 8002016:	d03c      	beq.n	8002092 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01c      	beq.n	800205a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002020:	4b4b      	ldr	r3, [pc, #300]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002026:	4a4a      	ldr	r2, [pc, #296]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7fe fc98 	bl	8000964 <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7fe fc94 	bl	8000964 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e1d4      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204a:	4b41      	ldr	r3, [pc, #260]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 800204c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ef      	beq.n	8002038 <HAL_RCC_OscConfig+0x3ec>
 8002058:	e01b      	b.n	8002092 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205a:	4b3d      	ldr	r3, [pc, #244]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 800205c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002060:	4a3b      	ldr	r2, [pc, #236]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002062:	f023 0301 	bic.w	r3, r3, #1
 8002066:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206a:	f7fe fc7b 	bl	8000964 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002072:	f7fe fc77 	bl	8000964 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e1b7      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002084:	4b32      	ldr	r3, [pc, #200]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ef      	bne.n	8002072 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80a6 	beq.w	80021ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a0:	2300      	movs	r3, #0
 80020a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 80020a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10d      	bne.n	80020cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	4b27      	ldr	r3, [pc, #156]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b4:	4a26      	ldr	r2, [pc, #152]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 80020b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80020bc:	4b24      	ldr	r3, [pc, #144]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c8:	2301      	movs	r3, #1
 80020ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020cc:	4b21      	ldr	r3, [pc, #132]	@ (8002154 <HAL_RCC_OscConfig+0x508>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d118      	bne.n	800210a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002154 <HAL_RCC_OscConfig+0x508>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002154 <HAL_RCC_OscConfig+0x508>)
 80020de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e4:	f7fe fc3e 	bl	8000964 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ec:	f7fe fc3a 	bl	8000964 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e17a      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fe:	4b15      	ldr	r3, [pc, #84]	@ (8002154 <HAL_RCC_OscConfig+0x508>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b01      	cmp	r3, #1
 8002110:	d108      	bne.n	8002124 <HAL_RCC_OscConfig+0x4d8>
 8002112:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002122:	e029      	b.n	8002178 <HAL_RCC_OscConfig+0x52c>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	2b05      	cmp	r3, #5
 800212a:	d115      	bne.n	8002158 <HAL_RCC_OscConfig+0x50c>
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800213c:	4b04      	ldr	r3, [pc, #16]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002142:	4a03      	ldr	r2, [pc, #12]	@ (8002150 <HAL_RCC_OscConfig+0x504>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800214c:	e014      	b.n	8002178 <HAL_RCC_OscConfig+0x52c>
 800214e:	bf00      	nop
 8002150:	40021000 	.word	0x40021000
 8002154:	40007000 	.word	0x40007000
 8002158:	4b9c      	ldr	r3, [pc, #624]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800215e:	4a9b      	ldr	r2, [pc, #620]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002168:	4b98      	ldr	r3, [pc, #608]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 800216a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216e:	4a97      	ldr	r2, [pc, #604]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d016      	beq.n	80021ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe fbf0 	bl	8000964 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe fbec 	bl	8000964 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e12a      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219e:	4b8b      	ldr	r3, [pc, #556]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0ed      	beq.n	8002188 <HAL_RCC_OscConfig+0x53c>
 80021ac:	e015      	b.n	80021da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ae:	f7fe fbd9 	bl	8000964 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe fbd5 	bl	8000964 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e113      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021cc:	4b7f      	ldr	r3, [pc, #508]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 80021ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ed      	bne.n	80021b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021da:	7ffb      	ldrb	r3, [r7, #31]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d105      	bne.n	80021ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e0:	4b7a      	ldr	r3, [pc, #488]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	4a79      	ldr	r2, [pc, #484]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 80021e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80fe 	beq.w	80023f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	f040 80d0 	bne.w	80023a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002200:	4b72      	ldr	r3, [pc, #456]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0203 	and.w	r2, r3, #3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	429a      	cmp	r2, r3
 8002212:	d130      	bne.n	8002276 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	3b01      	subs	r3, #1
 8002220:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d127      	bne.n	8002276 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002230:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d11f      	bne.n	8002276 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002240:	2a07      	cmp	r2, #7
 8002242:	bf14      	ite	ne
 8002244:	2201      	movne	r2, #1
 8002246:	2200      	moveq	r2, #0
 8002248:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800224a:	4293      	cmp	r3, r2
 800224c:	d113      	bne.n	8002276 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d109      	bne.n	8002276 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226c:	085b      	lsrs	r3, r3, #1
 800226e:	3b01      	subs	r3, #1
 8002270:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d06e      	beq.n	8002354 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	2b0c      	cmp	r3, #12
 800227a:	d069      	beq.n	8002350 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800227c:	4b53      	ldr	r3, [pc, #332]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002288:	4b50      	ldr	r3, [pc, #320]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0ad      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002298:	4b4c      	ldr	r3, [pc, #304]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a4b      	ldr	r2, [pc, #300]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 800229e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022a4:	f7fe fb5e 	bl	8000964 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe fb5a 	bl	8000964 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e09a      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022be:	4b43      	ldr	r3, [pc, #268]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ca:	4b40      	ldr	r3, [pc, #256]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 80022cc:	68da      	ldr	r2, [r3, #12]
 80022ce:	4b40      	ldr	r3, [pc, #256]	@ (80023d0 <HAL_RCC_OscConfig+0x784>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022da:	3a01      	subs	r2, #1
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	4311      	orrs	r1, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80022e4:	0212      	lsls	r2, r2, #8
 80022e6:	4311      	orrs	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80022ec:	0852      	lsrs	r2, r2, #1
 80022ee:	3a01      	subs	r2, #1
 80022f0:	0552      	lsls	r2, r2, #21
 80022f2:	4311      	orrs	r1, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022f8:	0852      	lsrs	r2, r2, #1
 80022fa:	3a01      	subs	r2, #1
 80022fc:	0652      	lsls	r2, r2, #25
 80022fe:	4311      	orrs	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002304:	0912      	lsrs	r2, r2, #4
 8002306:	0452      	lsls	r2, r2, #17
 8002308:	430a      	orrs	r2, r1
 800230a:	4930      	ldr	r1, [pc, #192]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 800230c:	4313      	orrs	r3, r2
 800230e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002310:	4b2e      	ldr	r3, [pc, #184]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a2d      	ldr	r2, [pc, #180]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800231a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800231c:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a2a      	ldr	r2, [pc, #168]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002326:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002328:	f7fe fb1c 	bl	8000964 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7fe fb18 	bl	8000964 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e058      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002342:	4b22      	ldr	r3, [pc, #136]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800234e:	e050      	b.n	80023f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e04f      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002354:	4b1d      	ldr	r3, [pc, #116]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d148      	bne.n	80023f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002360:	4b1a      	ldr	r3, [pc, #104]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a19      	ldr	r2, [pc, #100]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002366:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800236a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800236c:	4b17      	ldr	r3, [pc, #92]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a16      	ldr	r2, [pc, #88]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002376:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002378:	f7fe faf4 	bl	8000964 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe faf0 	bl	8000964 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e030      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002392:	4b0e      	ldr	r3, [pc, #56]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x734>
 800239e:	e028      	b.n	80023f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b0c      	cmp	r3, #12
 80023a4:	d023      	beq.n	80023ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a08      	ldr	r2, [pc, #32]	@ (80023cc <HAL_RCC_OscConfig+0x780>)
 80023ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe fad7 	bl	8000964 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b8:	e00c      	b.n	80023d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ba:	f7fe fad3 	bl	8000964 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d905      	bls.n	80023d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e013      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
 80023cc:	40021000 	.word	0x40021000
 80023d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d4:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <HAL_RCC_OscConfig+0x7b0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ec      	bne.n	80023ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023e0:	4b06      	ldr	r3, [pc, #24]	@ (80023fc <HAL_RCC_OscConfig+0x7b0>)
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4905      	ldr	r1, [pc, #20]	@ (80023fc <HAL_RCC_OscConfig+0x7b0>)
 80023e6:	4b06      	ldr	r3, [pc, #24]	@ (8002400 <HAL_RCC_OscConfig+0x7b4>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	60cb      	str	r3, [r1, #12]
 80023ec:	e001      	b.n	80023f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3720      	adds	r7, #32
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	feeefffc 	.word	0xfeeefffc

08002404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0e7      	b.n	80025e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002418:	4b75      	ldr	r3, [pc, #468]	@ (80025f0 <HAL_RCC_ClockConfig+0x1ec>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0307 	and.w	r3, r3, #7
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d910      	bls.n	8002448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b72      	ldr	r3, [pc, #456]	@ (80025f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 0207 	bic.w	r2, r3, #7
 800242e:	4970      	ldr	r1, [pc, #448]	@ (80025f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4313      	orrs	r3, r2
 8002434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b6e      	ldr	r3, [pc, #440]	@ (80025f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0cf      	b.n	80025e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d010      	beq.n	8002476 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	4b66      	ldr	r3, [pc, #408]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002460:	429a      	cmp	r2, r3
 8002462:	d908      	bls.n	8002476 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b63      	ldr	r3, [pc, #396]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4960      	ldr	r1, [pc, #384]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d04c      	beq.n	800251c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248a:	4b5a      	ldr	r3, [pc, #360]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d121      	bne.n	80024da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0a6      	b.n	80025e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a2:	4b54      	ldr	r3, [pc, #336]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d115      	bne.n	80024da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e09a      	b.n	80025e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ba:	4b4e      	ldr	r3, [pc, #312]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e08e      	b.n	80025e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ca:	4b4a      	ldr	r3, [pc, #296]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e086      	b.n	80025e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024da:	4b46      	ldr	r3, [pc, #280]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f023 0203 	bic.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4943      	ldr	r1, [pc, #268]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ec:	f7fe fa3a 	bl	8000964 <HAL_GetTick>
 80024f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	e00a      	b.n	800250a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f4:	f7fe fa36 	bl	8000964 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e06e      	b.n	80025e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	4b3a      	ldr	r3, [pc, #232]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 020c 	and.w	r2, r3, #12
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	429a      	cmp	r2, r3
 800251a:	d1eb      	bne.n	80024f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b31      	ldr	r3, [pc, #196]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002534:	429a      	cmp	r2, r3
 8002536:	d208      	bcs.n	800254a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b2e      	ldr	r3, [pc, #184]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	492b      	ldr	r1, [pc, #172]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254a:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <HAL_RCC_ClockConfig+0x1ec>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d210      	bcs.n	800257a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002558:	4b25      	ldr	r3, [pc, #148]	@ (80025f0 <HAL_RCC_ClockConfig+0x1ec>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 0207 	bic.w	r2, r3, #7
 8002560:	4923      	ldr	r1, [pc, #140]	@ (80025f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002568:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <HAL_RCC_ClockConfig+0x1ec>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e036      	b.n	80025e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002586:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	4918      	ldr	r1, [pc, #96]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a4:	4b13      	ldr	r3, [pc, #76]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4910      	ldr	r1, [pc, #64]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b8:	f000 f824 	bl	8002604 <HAL_RCC_GetSysClockFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b0d      	ldr	r3, [pc, #52]	@ (80025f4 <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	490b      	ldr	r1, [pc, #44]	@ (80025f8 <HAL_RCC_ClockConfig+0x1f4>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
 80025d4:	4a09      	ldr	r2, [pc, #36]	@ (80025fc <HAL_RCC_ClockConfig+0x1f8>)
 80025d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025d8:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <HAL_RCC_ClockConfig+0x1fc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe f971 	bl	80008c4 <HAL_InitTick>
 80025e2:	4603      	mov	r3, r0
 80025e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80025e6:	7afb      	ldrb	r3, [r7, #11]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08005264 	.word	0x08005264
 80025fc:	20000000 	.word	0x20000000
 8002600:	20000004 	.word	0x20000004

08002604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002612:	4b3e      	ldr	r3, [pc, #248]	@ (800270c <HAL_RCC_GetSysClockFreq+0x108>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f003 030c 	and.w	r3, r3, #12
 800261a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261c:	4b3b      	ldr	r3, [pc, #236]	@ (800270c <HAL_RCC_GetSysClockFreq+0x108>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x34>
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b0c      	cmp	r3, #12
 8002630:	d121      	bne.n	8002676 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d11e      	bne.n	8002676 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002638:	4b34      	ldr	r3, [pc, #208]	@ (800270c <HAL_RCC_GetSysClockFreq+0x108>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d107      	bne.n	8002654 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002644:	4b31      	ldr	r3, [pc, #196]	@ (800270c <HAL_RCC_GetSysClockFreq+0x108>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800264a:	0a1b      	lsrs	r3, r3, #8
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	e005      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002654:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HAL_RCC_GetSysClockFreq+0x108>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002660:	4a2b      	ldr	r2, [pc, #172]	@ (8002710 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002668:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10d      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002674:	e00a      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d102      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800267c:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x110>)
 800267e:	61bb      	str	r3, [r7, #24]
 8002680:	e004      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d101      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002688:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x114>)
 800268a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d134      	bne.n	80026fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002692:	4b1e      	ldr	r3, [pc, #120]	@ (800270c <HAL_RCC_GetSysClockFreq+0x108>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d003      	beq.n	80026aa <HAL_RCC_GetSysClockFreq+0xa6>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d003      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0xac>
 80026a8:	e005      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ac:	617b      	str	r3, [r7, #20]
      break;
 80026ae:	e005      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x114>)
 80026b2:	617b      	str	r3, [r7, #20]
      break;
 80026b4:	e002      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	617b      	str	r3, [r7, #20]
      break;
 80026ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026bc:	4b13      	ldr	r3, [pc, #76]	@ (800270c <HAL_RCC_GetSysClockFreq+0x108>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	3301      	adds	r3, #1
 80026c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026ca:	4b10      	ldr	r3, [pc, #64]	@ (800270c <HAL_RCC_GetSysClockFreq+0x108>)
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	fb03 f202 	mul.w	r2, r3, r2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026e2:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <HAL_RCC_GetSysClockFreq+0x108>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	0e5b      	lsrs	r3, r3, #25
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	3301      	adds	r3, #1
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026fc:	69bb      	ldr	r3, [r7, #24]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3724      	adds	r7, #36	@ 0x24
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	08005274 	.word	0x08005274
 8002714:	00f42400 	.word	0x00f42400
 8002718:	007a1200 	.word	0x007a1200

0800271c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002728:	4b2a      	ldr	r3, [pc, #168]	@ (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002734:	f7ff fa26 	bl	8001b84 <HAL_PWREx_GetVoltageRange>
 8002738:	6178      	str	r0, [r7, #20]
 800273a:	e014      	b.n	8002766 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800273c:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002740:	4a24      	ldr	r2, [pc, #144]	@ (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002746:	6593      	str	r3, [r2, #88]	@ 0x58
 8002748:	4b22      	ldr	r3, [pc, #136]	@ (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002754:	f7ff fa16 	bl	8001b84 <HAL_PWREx_GetVoltageRange>
 8002758:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800275a:	4b1e      	ldr	r3, [pc, #120]	@ (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800275c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275e:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002760:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002764:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800276c:	d10b      	bne.n	8002786 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b80      	cmp	r3, #128	@ 0x80
 8002772:	d919      	bls.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2ba0      	cmp	r3, #160	@ 0xa0
 8002778:	d902      	bls.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800277a:	2302      	movs	r3, #2
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	e013      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002780:	2301      	movs	r3, #1
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	e010      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b80      	cmp	r3, #128	@ 0x80
 800278a:	d902      	bls.n	8002792 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800278c:	2303      	movs	r3, #3
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e00a      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b80      	cmp	r3, #128	@ 0x80
 8002796:	d102      	bne.n	800279e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002798:	2302      	movs	r3, #2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	e004      	b.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b70      	cmp	r3, #112	@ 0x70
 80027a2:	d101      	bne.n	80027a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027a4:	2301      	movs	r3, #1
 80027a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027a8:	4b0b      	ldr	r3, [pc, #44]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 0207 	bic.w	r2, r3, #7
 80027b0:	4909      	ldr	r1, [pc, #36]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027b8:	4b07      	ldr	r3, [pc, #28]	@ (80027d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0307 	and.w	r3, r3, #7
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3718      	adds	r7, #24
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40022000 	.word	0x40022000

080027dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027e4:	2300      	movs	r3, #0
 80027e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027e8:	2300      	movs	r3, #0
 80027ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d041      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002800:	d02a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002802:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002806:	d824      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002808:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800280c:	d008      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800280e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002812:	d81e      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002818:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800281c:	d010      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800281e:	e018      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002820:	4b86      	ldr	r3, [pc, #536]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	4a85      	ldr	r2, [pc, #532]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800282a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800282c:	e015      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3304      	adds	r3, #4
 8002832:	2100      	movs	r1, #0
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fabb 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 800283a:	4603      	mov	r3, r0
 800283c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800283e:	e00c      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3320      	adds	r3, #32
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f000 fba6 	bl	8002f98 <RCCEx_PLLSAI2_Config>
 800284c:	4603      	mov	r3, r0
 800284e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002850:	e003      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	74fb      	strb	r3, [r7, #19]
      break;
 8002856:	e000      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800285a:	7cfb      	ldrb	r3, [r7, #19]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002860:	4b76      	ldr	r3, [pc, #472]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002866:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800286e:	4973      	ldr	r1, [pc, #460]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002876:	e001      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d041      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800288c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002890:	d02a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002892:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002896:	d824      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002898:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800289c:	d008      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800289e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028a2:	d81e      	bhi.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028ac:	d010      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80028ae:	e018      	b.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b0:	4b62      	ldr	r3, [pc, #392]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a61      	ldr	r2, [pc, #388]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028bc:	e015      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fa73 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028ce:	e00c      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3320      	adds	r3, #32
 80028d4:	2100      	movs	r1, #0
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 fb5e 	bl	8002f98 <RCCEx_PLLSAI2_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028e0:	e003      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	74fb      	strb	r3, [r7, #19]
      break;
 80028e6:	e000      	b.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10b      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028f0:	4b52      	ldr	r3, [pc, #328]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80028fe:	494f      	ldr	r1, [pc, #316]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002906:	e001      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80a0 	beq.w	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800291a:	2300      	movs	r3, #0
 800291c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800291e:	4b47      	ldr	r3, [pc, #284]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800292a:	2301      	movs	r3, #1
 800292c:	e000      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800292e:	2300      	movs	r3, #0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002934:	4b41      	ldr	r3, [pc, #260]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	4a40      	ldr	r2, [pc, #256]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002940:	4b3e      	ldr	r3, [pc, #248]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800294c:	2301      	movs	r3, #1
 800294e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002950:	4b3b      	ldr	r3, [pc, #236]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3a      	ldr	r2, [pc, #232]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800295a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800295c:	f7fe f802 	bl	8000964 <HAL_GetTick>
 8002960:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002962:	e009      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7fd fffe 	bl	8000964 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d902      	bls.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	74fb      	strb	r3, [r7, #19]
        break;
 8002976:	e005      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002978:	4b31      	ldr	r3, [pc, #196]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ef      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d15c      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800298a:	4b2c      	ldr	r3, [pc, #176]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002990:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002994:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01f      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d019      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029a8:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029b4:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	4a20      	ldr	r2, [pc, #128]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029c4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ca:	4a1c      	ldr	r2, [pc, #112]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029d4:	4a19      	ldr	r2, [pc, #100]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fd ffbd 	bl	8000964 <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ec:	e00b      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7fd ffb9 	bl	8000964 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d902      	bls.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	74fb      	strb	r3, [r7, #19]
            break;
 8002a04:	e006      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a06:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d0ec      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a1a:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a2a:	4904      	ldr	r1, [pc, #16]	@ (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002a32:	e009      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
 8002a38:	e006      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a48:	7c7b      	ldrb	r3, [r7, #17]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4e:	4b9e      	ldr	r3, [pc, #632]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	4a9d      	ldr	r2, [pc, #628]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a66:	4b98      	ldr	r3, [pc, #608]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6c:	f023 0203 	bic.w	r2, r3, #3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a74:	4994      	ldr	r1, [pc, #592]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a88:	4b8f      	ldr	r3, [pc, #572]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a8e:	f023 020c 	bic.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a96:	498c      	ldr	r1, [pc, #560]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002aaa:	4b87      	ldr	r3, [pc, #540]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab8:	4983      	ldr	r1, [pc, #524]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00a      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002acc:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	497b      	ldr	r1, [pc, #492]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002aee:	4b76      	ldr	r3, [pc, #472]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002af4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afc:	4972      	ldr	r1, [pc, #456]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b10:	4b6d      	ldr	r3, [pc, #436]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b1e:	496a      	ldr	r1, [pc, #424]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b32:	4b65      	ldr	r3, [pc, #404]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b40:	4961      	ldr	r1, [pc, #388]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b54:	4b5c      	ldr	r3, [pc, #368]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b62:	4959      	ldr	r1, [pc, #356]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b76:	4b54      	ldr	r3, [pc, #336]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b7c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b84:	4950      	ldr	r1, [pc, #320]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b98:	4b4b      	ldr	r3, [pc, #300]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba6:	4948      	ldr	r1, [pc, #288]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bba:	4b43      	ldr	r3, [pc, #268]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	493f      	ldr	r1, [pc, #252]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d028      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bea:	4937      	ldr	r1, [pc, #220]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bfa:	d106      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bfc:	4b32      	ldr	r3, [pc, #200]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	4a31      	ldr	r2, [pc, #196]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c06:	60d3      	str	r3, [r2, #12]
 8002c08:	e011      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3304      	adds	r3, #4
 8002c18:	2101      	movs	r1, #1
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f8c8 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c24:	7cfb      	ldrb	r3, [r7, #19]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d028      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c3a:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c40:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c48:	491f      	ldr	r1, [pc, #124]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c58:	d106      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c64:	60d3      	str	r3, [r2, #12]
 8002c66:	e011      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2101      	movs	r1, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f899 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c88:	7cfb      	ldrb	r3, [r7, #19]
 8002c8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d02b      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ca6:	4908      	ldr	r1, [pc, #32]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cb6:	d109      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb8:	4b03      	ldr	r3, [pc, #12]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4a02      	ldr	r2, [pc, #8]	@ (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cc2:	60d3      	str	r3, [r2, #12]
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cc6:	bf00      	nop
 8002cc8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002cd4:	d10c      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f867 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ce6:	7cfb      	ldrb	r3, [r7, #19]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d02f      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d0a:	4928      	ldr	r1, [pc, #160]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	2102      	movs	r1, #2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 f844 	bl	8002db0 <RCCEx_PLLSAI1_Config>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d014      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	74bb      	strb	r3, [r7, #18]
 8002d36:	e011      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d40:	d10c      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3320      	adds	r3, #32
 8002d46:	2102      	movs	r1, #2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 f925 	bl	8002f98 <RCCEx_PLLSAI2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00a      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d68:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d6e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d76:	490d      	ldr	r1, [pc, #52]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d90:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d9a:	4904      	ldr	r1, [pc, #16]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002da2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dbe:	4b75      	ldr	r3, [pc, #468]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dca:	4b72      	ldr	r3, [pc, #456]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	f003 0203 	and.w	r2, r3, #3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d10d      	bne.n	8002df6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002de2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
       ||
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d047      	beq.n	8002e86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	e044      	b.n	8002e86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d018      	beq.n	8002e36 <RCCEx_PLLSAI1_Config+0x86>
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d825      	bhi.n	8002e54 <RCCEx_PLLSAI1_Config+0xa4>
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <RCCEx_PLLSAI1_Config+0x62>
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d009      	beq.n	8002e24 <RCCEx_PLLSAI1_Config+0x74>
 8002e10:	e020      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e12:	4b60      	ldr	r3, [pc, #384]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d11d      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e22:	e01a      	b.n	8002e5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e24:	4b5b      	ldr	r3, [pc, #364]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d116      	bne.n	8002e5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e34:	e013      	b.n	8002e5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e36:	4b57      	ldr	r3, [pc, #348]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10f      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e42:	4b54      	ldr	r3, [pc, #336]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e52:	e006      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      break;
 8002e58:	e004      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6819      	ldr	r1, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	4944      	ldr	r1, [pc, #272]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d17d      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e8c:	4b41      	ldr	r3, [pc, #260]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a40      	ldr	r2, [pc, #256]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e98:	f7fd fd64 	bl	8000964 <HAL_GetTick>
 8002e9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e9e:	e009      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ea0:	f7fd fd60 	bl	8000964 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d902      	bls.n	8002eb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002eb2:	e005      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002eb4:	4b37      	ldr	r3, [pc, #220]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1ef      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d160      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d111      	bne.n	8002ef0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ecc:	4b31      	ldr	r3, [pc, #196]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002ed4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	0211      	lsls	r1, r2, #8
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68d2      	ldr	r2, [r2, #12]
 8002ee2:	0912      	lsrs	r2, r2, #4
 8002ee4:	0452      	lsls	r2, r2, #17
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	492a      	ldr	r1, [pc, #168]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	610b      	str	r3, [r1, #16]
 8002eee:	e027      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d112      	bne.n	8002f1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ef6:	4b27      	ldr	r3, [pc, #156]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002efe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	6892      	ldr	r2, [r2, #8]
 8002f06:	0211      	lsls	r1, r2, #8
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6912      	ldr	r2, [r2, #16]
 8002f0c:	0852      	lsrs	r2, r2, #1
 8002f0e:	3a01      	subs	r2, #1
 8002f10:	0552      	lsls	r2, r2, #21
 8002f12:	430a      	orrs	r2, r1
 8002f14:	491f      	ldr	r1, [pc, #124]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	610b      	str	r3, [r1, #16]
 8002f1a:	e011      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1e:	691b      	ldr	r3, [r3, #16]
 8002f20:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6892      	ldr	r2, [r2, #8]
 8002f2c:	0211      	lsls	r1, r2, #8
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6952      	ldr	r2, [r2, #20]
 8002f32:	0852      	lsrs	r2, r2, #1
 8002f34:	3a01      	subs	r2, #1
 8002f36:	0652      	lsls	r2, r2, #25
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	4916      	ldr	r1, [pc, #88]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f40:	4b14      	ldr	r3, [pc, #80]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a13      	ldr	r2, [pc, #76]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002f4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7fd fd0a 	bl	8000964 <HAL_GetTick>
 8002f50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f52:	e009      	b.n	8002f68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f54:	f7fd fd06 	bl	8000964 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d902      	bls.n	8002f68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	73fb      	strb	r3, [r7, #15]
          break;
 8002f66:	e005      	b.n	8002f74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f68:	4b0a      	ldr	r3, [pc, #40]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ef      	beq.n	8002f54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f7a:	4b06      	ldr	r3, [pc, #24]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	4904      	ldr	r1, [pc, #16]	@ (8002f94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000

08002f98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b084      	sub	sp, #16
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d018      	beq.n	8002fe4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fb2:	4b67      	ldr	r3, [pc, #412]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0203 	and.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d10d      	bne.n	8002fde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d009      	beq.n	8002fde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fca:	4b61      	ldr	r3, [pc, #388]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	091b      	lsrs	r3, r3, #4
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d047      	beq.n	800306e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	73fb      	strb	r3, [r7, #15]
 8002fe2:	e044      	b.n	800306e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d018      	beq.n	800301e <RCCEx_PLLSAI2_Config+0x86>
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d825      	bhi.n	800303c <RCCEx_PLLSAI2_Config+0xa4>
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d002      	beq.n	8002ffa <RCCEx_PLLSAI2_Config+0x62>
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d009      	beq.n	800300c <RCCEx_PLLSAI2_Config+0x74>
 8002ff8:	e020      	b.n	800303c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ffa:	4b55      	ldr	r3, [pc, #340]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11d      	bne.n	8003042 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300a:	e01a      	b.n	8003042 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800300c:	4b50      	ldr	r3, [pc, #320]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d116      	bne.n	8003046 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800301c:	e013      	b.n	8003046 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800301e:	4b4c      	ldr	r3, [pc, #304]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10f      	bne.n	800304a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800302a:	4b49      	ldr	r3, [pc, #292]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800303a:	e006      	b.n	800304a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      break;
 8003040:	e004      	b.n	800304c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800304a:	bf00      	nop
    }

    if(status == HAL_OK)
 800304c:	7bfb      	ldrb	r3, [r7, #15]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10d      	bne.n	800306e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003052:	4b3f      	ldr	r3, [pc, #252]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6819      	ldr	r1, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	430b      	orrs	r3, r1
 8003068:	4939      	ldr	r1, [pc, #228]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	4313      	orrs	r3, r2
 800306c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d167      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003074:	4b36      	ldr	r3, [pc, #216]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a35      	ldr	r2, [pc, #212]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800307a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800307e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003080:	f7fd fc70 	bl	8000964 <HAL_GetTick>
 8003084:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003086:	e009      	b.n	800309c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003088:	f7fd fc6c 	bl	8000964 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d902      	bls.n	800309c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	73fb      	strb	r3, [r7, #15]
        break;
 800309a:	e005      	b.n	80030a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800309c:	4b2c      	ldr	r3, [pc, #176]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ef      	bne.n	8003088 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d14a      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d111      	bne.n	80030d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030b4:	4b26      	ldr	r3, [pc, #152]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80030bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6892      	ldr	r2, [r2, #8]
 80030c4:	0211      	lsls	r1, r2, #8
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68d2      	ldr	r2, [r2, #12]
 80030ca:	0912      	lsrs	r2, r2, #4
 80030cc:	0452      	lsls	r2, r2, #17
 80030ce:	430a      	orrs	r2, r1
 80030d0:	491f      	ldr	r1, [pc, #124]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	614b      	str	r3, [r1, #20]
 80030d6:	e011      	b.n	80030fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6892      	ldr	r2, [r2, #8]
 80030e8:	0211      	lsls	r1, r2, #8
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6912      	ldr	r2, [r2, #16]
 80030ee:	0852      	lsrs	r2, r2, #1
 80030f0:	3a01      	subs	r2, #1
 80030f2:	0652      	lsls	r2, r2, #25
 80030f4:	430a      	orrs	r2, r1
 80030f6:	4916      	ldr	r1, [pc, #88]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030fc:	4b14      	ldr	r3, [pc, #80]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a13      	ldr	r2, [pc, #76]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003106:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fd fc2c 	bl	8000964 <HAL_GetTick>
 800310c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800310e:	e009      	b.n	8003124 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003110:	f7fd fc28 	bl	8000964 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d902      	bls.n	8003124 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	73fb      	strb	r3, [r7, #15]
          break;
 8003122:	e005      	b.n	8003130 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003124:	4b0a      	ldr	r3, [pc, #40]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0ef      	beq.n	8003110 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4904      	ldr	r1, [pc, #16]	@ (8003150 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003144:	7bfb      	ldrb	r3, [r7, #15]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e049      	b.n	80031fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fd fb3a 	bl	80007f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3304      	adds	r3, #4
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f000 fa38 	bl	8003608 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d020      	beq.n	8003266 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01b      	beq.n	8003266 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0202 	mvn.w	r2, #2
 8003236:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f9bc 	bl	80035ca <HAL_TIM_IC_CaptureCallback>
 8003252:	e005      	b.n	8003260 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f9ae 	bl	80035b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f9bf 	bl	80035de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0304 	and.w	r3, r3, #4
 8003276:	2b00      	cmp	r3, #0
 8003278:	d01b      	beq.n	80032b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f06f 0204 	mvn.w	r2, #4
 8003282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f996 	bl	80035ca <HAL_TIM_IC_CaptureCallback>
 800329e:	e005      	b.n	80032ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 f988 	bl	80035b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f999 	bl	80035de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d020      	beq.n	80032fe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01b      	beq.n	80032fe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0208 	mvn.w	r2, #8
 80032ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2204      	movs	r2, #4
 80032d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f970 	bl	80035ca <HAL_TIM_IC_CaptureCallback>
 80032ea:	e005      	b.n	80032f8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f962 	bl	80035b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f973 	bl	80035de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b00      	cmp	r3, #0
 8003306:	d020      	beq.n	800334a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01b      	beq.n	800334a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f06f 0210 	mvn.w	r2, #16
 800331a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2208      	movs	r2, #8
 8003320:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f94a 	bl	80035ca <HAL_TIM_IC_CaptureCallback>
 8003336:	e005      	b.n	8003344 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f93c 	bl	80035b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f94d 	bl	80035de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b00      	cmp	r3, #0
 8003352:	d00c      	beq.n	800336e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d007      	beq.n	800336e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f06f 0201 	mvn.w	r2, #1
 8003366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f91a 	bl	80035a2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003374:	2b00      	cmp	r3, #0
 8003376:	d104      	bne.n	8003382 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00c      	beq.n	800339c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	d007      	beq.n	800339c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fb08 	bl	80039ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80033b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fb00 	bl	80039c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00c      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d007      	beq.n	80033e4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f907 	bl	80035f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0320 	and.w	r3, r3, #32
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00c      	beq.n	8003408 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f003 0320 	and.w	r3, r3, #32
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d007      	beq.n	8003408 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f06f 0220 	mvn.w	r2, #32
 8003400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fac8 	bl	8003998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003408:	bf00      	nop
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003424:	2b01      	cmp	r3, #1
 8003426:	d101      	bne.n	800342c <HAL_TIM_ConfigClockSource+0x1c>
 8003428:	2302      	movs	r3, #2
 800342a:	e0b6      	b.n	800359a <HAL_TIM_ConfigClockSource+0x18a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800344e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003468:	d03e      	beq.n	80034e8 <HAL_TIM_ConfigClockSource+0xd8>
 800346a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800346e:	f200 8087 	bhi.w	8003580 <HAL_TIM_ConfigClockSource+0x170>
 8003472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003476:	f000 8086 	beq.w	8003586 <HAL_TIM_ConfigClockSource+0x176>
 800347a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800347e:	d87f      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 8003480:	2b70      	cmp	r3, #112	@ 0x70
 8003482:	d01a      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0xaa>
 8003484:	2b70      	cmp	r3, #112	@ 0x70
 8003486:	d87b      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 8003488:	2b60      	cmp	r3, #96	@ 0x60
 800348a:	d050      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x11e>
 800348c:	2b60      	cmp	r3, #96	@ 0x60
 800348e:	d877      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 8003490:	2b50      	cmp	r3, #80	@ 0x50
 8003492:	d03c      	beq.n	800350e <HAL_TIM_ConfigClockSource+0xfe>
 8003494:	2b50      	cmp	r3, #80	@ 0x50
 8003496:	d873      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 8003498:	2b40      	cmp	r3, #64	@ 0x40
 800349a:	d058      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x13e>
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	d86f      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 80034a0:	2b30      	cmp	r3, #48	@ 0x30
 80034a2:	d064      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x15e>
 80034a4:	2b30      	cmp	r3, #48	@ 0x30
 80034a6:	d86b      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 80034a8:	2b20      	cmp	r3, #32
 80034aa:	d060      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x15e>
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d867      	bhi.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d05c      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x15e>
 80034b4:	2b10      	cmp	r3, #16
 80034b6:	d05a      	beq.n	800356e <HAL_TIM_ConfigClockSource+0x15e>
 80034b8:	e062      	b.n	8003580 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ca:	f000 f9bd 	bl	8003848 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80034dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	609a      	str	r2, [r3, #8]
      break;
 80034e6:	e04f      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034f8:	f000 f9a6 	bl	8003848 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800350a:	609a      	str	r2, [r3, #8]
      break;
 800350c:	e03c      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800351a:	461a      	mov	r2, r3
 800351c:	f000 f91a 	bl	8003754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2150      	movs	r1, #80	@ 0x50
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f973 	bl	8003812 <TIM_ITRx_SetConfig>
      break;
 800352c:	e02c      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800353a:	461a      	mov	r2, r3
 800353c:	f000 f939 	bl	80037b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2160      	movs	r1, #96	@ 0x60
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f963 	bl	8003812 <TIM_ITRx_SetConfig>
      break;
 800354c:	e01c      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800355a:	461a      	mov	r2, r3
 800355c:	f000 f8fa 	bl	8003754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2140      	movs	r1, #64	@ 0x40
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f953 	bl	8003812 <TIM_ITRx_SetConfig>
      break;
 800356c:	e00c      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f000 f94a 	bl	8003812 <TIM_ITRx_SetConfig>
      break;
 800357e:	e003      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      break;
 8003584:	e000      	b.n	8003588 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a2:	b480      	push	{r7}
 80035a4:	b083      	sub	sp, #12
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035de:	b480      	push	{r7}
 80035e0:	b083      	sub	sp, #12
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a46      	ldr	r2, [pc, #280]	@ (8003734 <TIM_Base_SetConfig+0x12c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d013      	beq.n	8003648 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003626:	d00f      	beq.n	8003648 <TIM_Base_SetConfig+0x40>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a43      	ldr	r2, [pc, #268]	@ (8003738 <TIM_Base_SetConfig+0x130>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d00b      	beq.n	8003648 <TIM_Base_SetConfig+0x40>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a42      	ldr	r2, [pc, #264]	@ (800373c <TIM_Base_SetConfig+0x134>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_Base_SetConfig+0x40>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a41      	ldr	r2, [pc, #260]	@ (8003740 <TIM_Base_SetConfig+0x138>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0x40>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a40      	ldr	r2, [pc, #256]	@ (8003744 <TIM_Base_SetConfig+0x13c>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d108      	bne.n	800365a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a35      	ldr	r2, [pc, #212]	@ (8003734 <TIM_Base_SetConfig+0x12c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01f      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003668:	d01b      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a32      	ldr	r2, [pc, #200]	@ (8003738 <TIM_Base_SetConfig+0x130>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d017      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a31      	ldr	r2, [pc, #196]	@ (800373c <TIM_Base_SetConfig+0x134>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d013      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a30      	ldr	r2, [pc, #192]	@ (8003740 <TIM_Base_SetConfig+0x138>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00f      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a2f      	ldr	r2, [pc, #188]	@ (8003744 <TIM_Base_SetConfig+0x13c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00b      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a2e      	ldr	r2, [pc, #184]	@ (8003748 <TIM_Base_SetConfig+0x140>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a2d      	ldr	r2, [pc, #180]	@ (800374c <TIM_Base_SetConfig+0x144>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_Base_SetConfig+0x9a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a2c      	ldr	r2, [pc, #176]	@ (8003750 <TIM_Base_SetConfig+0x148>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d108      	bne.n	80036b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a16      	ldr	r2, [pc, #88]	@ (8003734 <TIM_Base_SetConfig+0x12c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00f      	beq.n	8003700 <TIM_Base_SetConfig+0xf8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a18      	ldr	r2, [pc, #96]	@ (8003744 <TIM_Base_SetConfig+0x13c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d00b      	beq.n	8003700 <TIM_Base_SetConfig+0xf8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a17      	ldr	r2, [pc, #92]	@ (8003748 <TIM_Base_SetConfig+0x140>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d007      	beq.n	8003700 <TIM_Base_SetConfig+0xf8>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a16      	ldr	r2, [pc, #88]	@ (800374c <TIM_Base_SetConfig+0x144>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d003      	beq.n	8003700 <TIM_Base_SetConfig+0xf8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a15      	ldr	r2, [pc, #84]	@ (8003750 <TIM_Base_SetConfig+0x148>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d103      	bne.n	8003708 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f023 0201 	bic.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	611a      	str	r2, [r3, #16]
  }
}
 8003726:	bf00      	nop
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800
 8003740:	40000c00 	.word	0x40000c00
 8003744:	40013400 	.word	0x40013400
 8003748:	40014000 	.word	0x40014000
 800374c:	40014400 	.word	0x40014400
 8003750:	40014800 	.word	0x40014800

08003754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f023 0201 	bic.w	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800377e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f023 030a 	bic.w	r3, r3, #10
 8003790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4313      	orrs	r3, r2
 8003798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	621a      	str	r2, [r3, #32]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b087      	sub	sp, #28
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	f023 0210 	bic.w	r2, r3, #16
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80037dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	031b      	lsls	r3, r3, #12
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80037ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	621a      	str	r2, [r3, #32]
}
 8003806:	bf00      	nop
 8003808:	371c      	adds	r7, #28
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003812:	b480      	push	{r7}
 8003814:	b085      	sub	sp, #20
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
 800381a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	f043 0307 	orr.w	r3, r3, #7
 8003834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	609a      	str	r2, [r3, #8]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	021a      	lsls	r2, r3, #8
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	431a      	orrs	r2, r3
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	4313      	orrs	r3, r2
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	4313      	orrs	r3, r2
 8003874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	609a      	str	r2, [r3, #8]
}
 800387c:	bf00      	nop
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003898:	2b01      	cmp	r3, #1
 800389a:	d101      	bne.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800389c:	2302      	movs	r3, #2
 800389e:	e068      	b.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d108      	bne.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80038da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1e      	ldr	r2, [pc, #120]	@ (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d01d      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003912:	d018      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1b      	ldr	r2, [pc, #108]	@ (8003988 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d013      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1a      	ldr	r2, [pc, #104]	@ (800398c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a18      	ldr	r2, [pc, #96]	@ (8003990 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d009      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a13      	ldr	r2, [pc, #76]	@ (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a14      	ldr	r2, [pc, #80]	@ (8003994 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d10c      	bne.n	8003960 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800394c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	4313      	orrs	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40012c00 	.word	0x40012c00
 8003984:	40013400 	.word	0x40013400
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40014000 	.word	0x40014000

08003998 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <sht30_interface_iic_init>:
static sht30_handle_t gs_handle;        /**< sht30 handle */

/*
 * Privates
 */
 uint8_t sht30_interface_iic_init(void){
 80039d4:	b480      	push	{r7}
 80039d6:	af00      	add	r7, sp, #0
	 return 0;
 80039d8:	2300      	movs	r3, #0
 }
 80039da:	4618      	mov	r0, r3
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <sht30_interface_iic_deinit>:
 
 uint8_t sht30_interface_iic_deinit(void){
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
	 return 0;
 80039e8:	2300      	movs	r3, #0
 }
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <sht30_interface_iic_scl_read_address16>:
 
 uint8_t sht30_interface_iic_scl_read_address16(uint8_t addr, uint16_t reg, uint8_t *buf, uint16_t len){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60ba      	str	r2, [r7, #8]
 80039fc:	461a      	mov	r2, r3
 80039fe:	4603      	mov	r3, r0
 8003a00:	73fb      	strb	r3, [r7, #15]
 8003a02:	460b      	mov	r3, r1
 8003a04:	81bb      	strh	r3, [r7, #12]
 8003a06:	4613      	mov	r3, r2
 8003a08:	80fb      	strh	r3, [r7, #6]
	 uint8_t error;
	 
	error = board_sht30_write(addr, &reg, buf, sizeof(reg));
 8003a0a:	f107 030c 	add.w	r3, r7, #12
 8003a0e:	b299      	uxth	r1, r3
 8003a10:	7bf8      	ldrb	r0, [r7, #15]
 8003a12:	2302      	movs	r3, #2
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	f000 f8c1 	bl	8003b9c <board_sht30_write>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	75fb      	strb	r3, [r7, #23]
	if (error != 0){
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <sht30_interface_iic_scl_read_address16+0x34>
		return 1;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e00f      	b.n	8003a48 <sht30_interface_iic_scl_read_address16+0x54>
	}
	error = board_sht30_read(addr, &reg, buf, len);
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	b299      	uxth	r1, r3
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	7bf8      	ldrb	r0, [r7, #15]
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	f000 f8f4 	bl	8003c20 <board_sht30_read>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	75fb      	strb	r3, [r7, #23]
	if (error != 0){
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <sht30_interface_iic_scl_read_address16+0x52>
		return 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <sht30_interface_iic_scl_read_address16+0x54>
	}

    return 0;
 8003a46:	2300      	movs	r3, #0
 }
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <sht30_interface_iic_write_address16>:
 
 uint8_t sht30_interface_iic_write_address16(uint16_t addr, uint16_t reg, uint8_t *buf, uint16_t len){
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08e      	sub	sp, #56	@ 0x38
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60ba      	str	r2, [r7, #8]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	81fb      	strh	r3, [r7, #14]
 8003a5e:	460b      	mov	r3, r1
 8003a60:	81bb      	strh	r3, [r7, #12]
 8003a62:	4613      	mov	r3, r2
 8003a64:	80fb      	strh	r3, [r7, #6]
	 HAL_StatusTypeDef error;
	uint8_t arr[32];

	arr[0] = reg;
 8003a66:	89bb      	ldrh	r3, [r7, #12]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	753b      	strb	r3, [r7, #20]
	memcpy(arr+1, buf, len);
 8003a6c:	f107 0314 	add.w	r3, r7, #20
 8003a70:	3301      	adds	r3, #1
 8003a72:	88fa      	ldrh	r2, [r7, #6]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fcdd 	bl	8004436 <memcpy>
	error = board_sht30_write(addr, &reg, arr, (len+sizeof(reg)));
 8003a7c:	89fb      	ldrh	r3, [r7, #14]
 8003a7e:	b2d8      	uxtb	r0, r3
 8003a80:	f107 030c 	add.w	r3, r7, #12
 8003a84:	b299      	uxth	r1, r3
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	3302      	adds	r3, #2
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f107 0214 	add.w	r2, r7, #20
 8003a90:	f000 f884 	bl	8003b9c <board_sht30_write>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (error != 0){
 8003a9a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <sht30_interface_iic_write_address16+0x56>
		return 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <sht30_interface_iic_write_address16+0x58>
	}

    return 0;
 8003aa6:	2300      	movs	r3, #0
 }
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3738      	adds	r7, #56	@ 0x38
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <sht30_interface_delay_ms>:

 void sht30_interface_delay_ms(uint32_t ms){
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	HAL_Delay(ms);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7fc ff5f 	bl	800097c <HAL_Delay>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <sht30_interface_debug_print>:

void sht30_interface_debug_print(){
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0
	
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <SensorSHT3X_Init>:
/*
 * Publics
 */
void SensorSHT3X_Init(sht30_address_t addr_pin){
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]

    /* Inicializa o Handle do SHT30 e atribui as funcoes */
    DRIVER_SHT30_LINK_INIT(&gs_handle, sht30_handle_t);
 8003ade:	221c      	movs	r2, #28
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4819      	ldr	r0, [pc, #100]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003ae4:	f000 fc2b 	bl	800433e <memset>
    DRIVER_SHT30_LINK_IIC_INIT(&gs_handle, sht30_interface_iic_init);
 8003ae8:	4b17      	ldr	r3, [pc, #92]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003aea:	4a18      	ldr	r2, [pc, #96]	@ (8003b4c <SensorSHT3X_Init+0x78>)
 8003aec:	601a      	str	r2, [r3, #0]
    DRIVER_SHT30_LINK_IIC_DEINIT(&gs_handle, sht30_interface_iic_deinit);
 8003aee:	4b16      	ldr	r3, [pc, #88]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003af0:	4a17      	ldr	r2, [pc, #92]	@ (8003b50 <SensorSHT3X_Init+0x7c>)
 8003af2:	605a      	str	r2, [r3, #4]
    DRIVER_SHT30_LINK_IIC_READ_ADDRESS16(&gs_handle, sht30_interface_iic_scl_read_address16);
 8003af4:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003af6:	4a17      	ldr	r2, [pc, #92]	@ (8003b54 <SensorSHT3X_Init+0x80>)
 8003af8:	60da      	str	r2, [r3, #12]
    DRIVER_SHT30_LINK_IIC_WRITE_ADDRESS16(&gs_handle, sht30_interface_iic_write_address16);
 8003afa:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003afc:	4a16      	ldr	r2, [pc, #88]	@ (8003b58 <SensorSHT3X_Init+0x84>)
 8003afe:	609a      	str	r2, [r3, #8]
    DRIVER_SHT30_LINK_DELAY_MS(&gs_handle, sht30_interface_delay_ms);
 8003b00:	4b11      	ldr	r3, [pc, #68]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003b02:	4a16      	ldr	r2, [pc, #88]	@ (8003b5c <SensorSHT3X_Init+0x88>)
 8003b04:	611a      	str	r2, [r3, #16]
    DRIVER_SHT30_LINK_DEBUG_PRINT(&gs_handle, sht30_interface_debug_print);
 8003b06:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003b08:	4a15      	ldr	r2, [pc, #84]	@ (8003b60 <SensorSHT3X_Init+0x8c>)
 8003b0a:	615a      	str	r2, [r3, #20]

    /* set addr pin */
    sht30_set_addr_pin(&gs_handle, addr_pin);
 8003b0c:	79fb      	ldrb	r3, [r7, #7]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	480d      	ldr	r0, [pc, #52]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003b12:	f000 f9b1 	bl	8003e78 <sht30_set_addr_pin>
    /* sht30 init */
    sht30_init(&gs_handle);
 8003b16:	480c      	ldr	r0, [pc, #48]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003b18:	f000 f934 	bl	8003d84 <sht30_init>
    /* wait 10 ms */
    sht30_interface_delay_ms(10);   
 8003b1c:	200a      	movs	r0, #10
 8003b1e:	f7ff ffc7 	bl	8003ab0 <sht30_interface_delay_ms>
    /* set default repeatability */
    sht30_set_repeatability(&gs_handle, SHT30_SHOT_DEFAULT_REPEATABILITY);   
 8003b22:	2100      	movs	r1, #0
 8003b24:	4808      	ldr	r0, [pc, #32]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003b26:	f000 f9bc 	bl	8003ea2 <sht30_set_repeatability>
    /* set art */
    sht30_set_art(&gs_handle);    
 8003b2a:	4807      	ldr	r0, [pc, #28]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003b2c:	f000 fa6a 	bl	8004004 <sht30_set_art>
    /* wait 10 ms */
    sht30_interface_delay_ms(10);
 8003b30:	200a      	movs	r0, #10
 8003b32:	f7ff ffbd 	bl	8003ab0 <sht30_interface_delay_ms>
    /* set default heater */
    sht30_set_heater(&gs_handle, SHT30_SHOT_DEFAULT_HEATER);
 8003b36:	2100      	movs	r1, #0
 8003b38:	4803      	ldr	r0, [pc, #12]	@ (8003b48 <SensorSHT3X_Init+0x74>)
 8003b3a:	f000 fa8d 	bl	8004058 <sht30_set_heater>
}
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000138 	.word	0x20000138
 8003b4c:	080039d5 	.word	0x080039d5
 8003b50:	080039e5 	.word	0x080039e5
 8003b54:	080039f5 	.word	0x080039f5
 8003b58:	08003a51 	.word	0x08003a51
 8003b5c:	08003ab1 	.word	0x08003ab1
 8003b60:	08003ac7 	.word	0x08003ac7

08003b64 <SensorSHT3X_Read>:
void SensorSHT3X_SetParam(sensor_sht3x_param_e param, uint32_t val){
	
}
uint8_t SensorSHT3X_Read(float *temperature, float *humidity){
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af02      	add	r7, sp, #8
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
    uint16_t temperature_raw;
    uint16_t humidity_raw;
   
    /* read data */
    if (sht30_continuous_read(&gs_handle, (uint16_t *)&temperature_raw, temperature, (uint16_t *)&humidity_raw, humidity) != 0)
 8003b6e:	f107 020c 	add.w	r2, r7, #12
 8003b72:	f107 010e 	add.w	r1, r7, #14
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4806      	ldr	r0, [pc, #24]	@ (8003b98 <SensorSHT3X_Read+0x34>)
 8003b80:	f000 f9aa 	bl	8003ed8 <sht30_continuous_read>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <SensorSHT3X_Read+0x2a>
    {
        return 1;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <SensorSHT3X_Read+0x2c>
    }
    else
    {
        return 0;
 8003b8e:	2300      	movs	r3, #0
    }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000138 	.word	0x20000138

08003b9c <board_sht30_write>:

/*
 * Publics
 */

int8_t board_sht30_write(uint8_t addr, uint16_t reg, uint8_t *buf, uint16_t len){
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	@ 0x28
 8003ba0:	af04      	add	r7, sp, #16
 8003ba2:	60ba      	str	r2, [r7, #8]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	460b      	mov	r3, r1
 8003bac:	81bb      	strh	r3, [r7, #12]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef error;

	assert(buf != NULL);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d105      	bne.n	8003bc4 <board_sht30_write+0x28>
 8003bb8:	4b14      	ldr	r3, [pc, #80]	@ (8003c0c <board_sht30_write+0x70>)
 8003bba:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <board_sht30_write+0x74>)
 8003bbc:	212f      	movs	r1, #47	@ 0x2f
 8003bbe:	4815      	ldr	r0, [pc, #84]	@ (8003c14 <board_sht30_write+0x78>)
 8003bc0:	f000 fa88 	bl	80040d4 <__assert_func>
	assert(len != 0);
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <board_sht30_write+0x3a>
 8003bca:	4b13      	ldr	r3, [pc, #76]	@ (8003c18 <board_sht30_write+0x7c>)
 8003bcc:	4a10      	ldr	r2, [pc, #64]	@ (8003c10 <board_sht30_write+0x74>)
 8003bce:	2130      	movs	r1, #48	@ 0x30
 8003bd0:	4810      	ldr	r0, [pc, #64]	@ (8003c14 <board_sht30_write+0x78>)
 8003bd2:	f000 fa7f 	bl	80040d4 <__assert_func>

		/** _i2c1_lock(); **/	/*Only in Free RTOs*/
	/*error = HAL_I2C_Master_Transmit(&hi2c1, addr, buf, len, 100);*/
	error = HAL_I2C_Mem_Write(&hi2c1, addr, reg, I2C_MEMADD_SIZE_16BIT, buf, len, 100);
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	b299      	uxth	r1, r3
 8003bda:	89ba      	ldrh	r2, [r7, #12]
 8003bdc:	2364      	movs	r3, #100	@ 0x64
 8003bde:	9302      	str	r3, [sp, #8]
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	9301      	str	r3, [sp, #4]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	2302      	movs	r3, #2
 8003bea:	480c      	ldr	r0, [pc, #48]	@ (8003c1c <board_sht30_write+0x80>)
 8003bec:	f7fd fa42 	bl	8001074 <HAL_I2C_Mem_Write>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	75fb      	strb	r3, [r7, #23]
		/** _i2c1_unlock(); **/			/*Only in Free RTOs*/

	if (error != HAL_OK){
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d002      	beq.n	8003c00 <board_sht30_write+0x64>
		return BOARD_FAILED;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	e000      	b.n	8003c02 <board_sht30_write+0x66>
	}

    return BOARD_SUCCESS;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	08005038 	.word	0x08005038
 8003c10:	080052a4 	.word	0x080052a4
 8003c14:	08005044 	.word	0x08005044
 8003c18:	08005068 	.word	0x08005068
 8003c1c:	20000084 	.word	0x20000084

08003c20 <board_sht30_read>:

int8_t board_sht30_read(uint8_t addr, uint16_t reg, uint8_t *buf, uint16_t len){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	@ 0x28
 8003c24:	af04      	add	r7, sp, #16
 8003c26:	60ba      	str	r2, [r7, #8]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73fb      	strb	r3, [r7, #15]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	81bb      	strh	r3, [r7, #12]
 8003c32:	4613      	mov	r3, r2
 8003c34:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef error;

	assert(buf != NULL);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d105      	bne.n	8003c48 <board_sht30_read+0x28>
 8003c3c:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <board_sht30_read+0x70>)
 8003c3e:	4a15      	ldr	r2, [pc, #84]	@ (8003c94 <board_sht30_read+0x74>)
 8003c40:	2141      	movs	r1, #65	@ 0x41
 8003c42:	4815      	ldr	r0, [pc, #84]	@ (8003c98 <board_sht30_read+0x78>)
 8003c44:	f000 fa46 	bl	80040d4 <__assert_func>
	assert(len != 0);
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d105      	bne.n	8003c5a <board_sht30_read+0x3a>
 8003c4e:	4b13      	ldr	r3, [pc, #76]	@ (8003c9c <board_sht30_read+0x7c>)
 8003c50:	4a10      	ldr	r2, [pc, #64]	@ (8003c94 <board_sht30_read+0x74>)
 8003c52:	2142      	movs	r1, #66	@ 0x42
 8003c54:	4810      	ldr	r0, [pc, #64]	@ (8003c98 <board_sht30_read+0x78>)
 8003c56:	f000 fa3d 	bl	80040d4 <__assert_func>

		/** _i2c1_lock(); **/	/*Only in Free RTOs*/
	/*error = HAL_I2C_Master_Receive(&hi2c1, addr, buf, len, 100);*/
	error = HAL_I2C_Mem_Read(&hi2c1, addr, reg, I2C_MEMADD_SIZE_16BIT, buf, len, 100);
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	b299      	uxth	r1, r3
 8003c5e:	89ba      	ldrh	r2, [r7, #12]
 8003c60:	2364      	movs	r3, #100	@ 0x64
 8003c62:	9302      	str	r3, [sp, #8]
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	9301      	str	r3, [sp, #4]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	480c      	ldr	r0, [pc, #48]	@ (8003ca0 <board_sht30_read+0x80>)
 8003c70:	f7fd fb14 	bl	800129c <HAL_I2C_Mem_Read>
 8003c74:	4603      	mov	r3, r0
 8003c76:	75fb      	strb	r3, [r7, #23]
		/** _i2c1_unlock(); **/			/*Only in Free RTOs*/

	if (error != HAL_OK){
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <board_sht30_read+0x64>
		return BOARD_FAILED;
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c82:	e000      	b.n	8003c86 <board_sht30_read+0x66>
	}

    return BOARD_SUCCESS;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08005038 	.word	0x08005038
 8003c94:	080052b8 	.word	0x080052b8
 8003c98:	08005044 	.word	0x08005044
 8003c9c:	08005068 	.word	0x08005068
 8003ca0:	20000084 	.word	0x20000084

08003ca4 <a_sht30_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_sht30_write(sht30_handle_t *handle, uint16_t cmd)
{
 8003ca4:	b590      	push	{r4, r7, lr}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	460b      	mov	r3, r1
 8003cae:	807b      	strh	r3, [r7, #2]
    if (handle->iic_write_address16(handle->iic_addr, cmd, NULL, 0) != 0)        /* iic write */
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689c      	ldr	r4, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	7e18      	ldrb	r0, [r3, #24]
 8003cb8:	8879      	ldrh	r1, [r7, #2]
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	47a0      	blx	r4
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <a_sht30_write+0x26>
    {
        return 1;                                                                /* return error */
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <a_sht30_write+0x28>
    }
    else
    {
        return 0;                                                                /* success return 0 */
 8003cca:	2300      	movs	r3, #0
    }
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd90      	pop	{r4, r7, pc}

08003cd4 <a_sht30_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_sht30_read(sht30_handle_t *handle, uint16_t reg, uint8_t *data, uint16_t len)
{
 8003cd4:	b590      	push	{r4, r7, lr}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	607a      	str	r2, [r7, #4]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	817b      	strh	r3, [r7, #10]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	813b      	strh	r3, [r7, #8]
    if (handle->iic_read_address16(handle->iic_addr, reg, data, len) != 0)        /* iic read */
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	68dc      	ldr	r4, [r3, #12]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	7e18      	ldrb	r0, [r3, #24]
 8003cf0:	893b      	ldrh	r3, [r7, #8]
 8003cf2:	8979      	ldrh	r1, [r7, #10]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	47a0      	blx	r4
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <a_sht30_read+0x2e>
    {
        return 1;                                                                 /* return error */
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <a_sht30_read+0x30>
    }
    else
    {                                                                             /* success return 0 */
        return 0;
 8003d02:	2300      	movs	r3, #0
    }
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd90      	pop	{r4, r7, pc}

08003d0c <a_sht30_crc>:
 * @param[in] len is the data length
 * @return    crc
 * @note      none
 */
static uint8_t a_sht30_crc(uint8_t *data, uint16_t len)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
    const uint8_t POLYNOMIAL = 0x31;
 8003d18:	2331      	movs	r3, #49	@ 0x31
 8003d1a:	727b      	strb	r3, [r7, #9]
    uint8_t crc = 0xFF;
 8003d1c:	23ff      	movs	r3, #255	@ 0xff
 8003d1e:	73fb      	strb	r3, [r7, #15]
    uint16_t i, j;
  
    for (j = len; j != 0; --j)                                              /* length-- */
 8003d20:	887b      	ldrh	r3, [r7, #2]
 8003d22:	817b      	strh	r3, [r7, #10]
 8003d24:	e023      	b.n	8003d6e <a_sht30_crc+0x62>
    {
        crc ^= *data++;                                                     /* xor */
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	781a      	ldrb	r2, [r3, #0]
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	4053      	eors	r3, r2
 8003d32:	73fb      	strb	r3, [r7, #15]
        for (i = 8; i != 0; --i)                                            /* 8 times */
 8003d34:	2308      	movs	r3, #8
 8003d36:	81bb      	strh	r3, [r7, #12]
 8003d38:	e013      	b.n	8003d62 <a_sht30_crc+0x56>
        {
            crc = (crc & 0x80) ? (crc << 1) ^ POLYNOMIAL : (crc<<1);        /* calculate crc */
 8003d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	da08      	bge.n	8003d54 <a_sht30_crc+0x48>
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	b25a      	sxtb	r2, r3
 8003d48:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8003d4c:	4053      	eors	r3, r2
 8003d4e:	b25b      	sxtb	r3, r3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e002      	b.n	8003d5a <a_sht30_crc+0x4e>
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	73fb      	strb	r3, [r7, #15]
        for (i = 8; i != 0; --i)                                            /* 8 times */
 8003d5c:	89bb      	ldrh	r3, [r7, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	81bb      	strh	r3, [r7, #12]
 8003d62:	89bb      	ldrh	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e8      	bne.n	8003d3a <a_sht30_crc+0x2e>
    for (j = len; j != 0; --j)                                              /* length-- */
 8003d68:	897b      	ldrh	r3, [r7, #10]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	817b      	strh	r3, [r7, #10]
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1d8      	bne.n	8003d26 <a_sht30_crc+0x1a>
        }
    }
  
    return crc;                                                             /* return crc */
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <sht30_init>:
 *            - 2 handle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t sht30_init(sht30_handle_t *handle)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint16_t command;
    
    if (handle == NULL)                                                      /* check handle */
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <sht30_init+0x12>
    {
        return 2;                                                            /* return error */
 8003d92:	2302      	movs	r3, #2
 8003d94:	e05d      	b.n	8003e52 <sht30_init+0xce>
    }
    if (handle->debug_print == NULL)                                         /* check debug_print */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <sht30_init+0x1e>
    {
        return 3;                                                            /* return error */
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e057      	b.n	8003e52 <sht30_init+0xce>
    }
    if (handle->iic_init == NULL)                                            /* check iic_init */
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d105      	bne.n	8003db6 <sht30_init+0x32>
    {
        handle->debug_print("sht30: iic_init is null.\n");                   /* iic_init is null */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	482b      	ldr	r0, [pc, #172]	@ (8003e5c <sht30_init+0xd8>)
 8003db0:	4798      	blx	r3
       
        return 3;                                                            /* return error */
 8003db2:	2303      	movs	r3, #3
 8003db4:	e04d      	b.n	8003e52 <sht30_init+0xce>
    }
    if (handle->iic_deinit == NULL)                                          /* check iic_deinit */
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d105      	bne.n	8003dca <sht30_init+0x46>
    {
        handle->debug_print("sht30: iic_deinit is null.\n");                 /* iic_deinit is null */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	4827      	ldr	r0, [pc, #156]	@ (8003e60 <sht30_init+0xdc>)
 8003dc4:	4798      	blx	r3
       
        return 3;                                                            /* return error */
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e043      	b.n	8003e52 <sht30_init+0xce>
    }
    if (handle->iic_read_address16 == NULL)                                  /* check iic_read_address16 */
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d105      	bne.n	8003dde <sht30_init+0x5a>
    {
        handle->debug_print("sht30: iic_read_address16 is null.\n");         /* iic_read_address16 is null */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4823      	ldr	r0, [pc, #140]	@ (8003e64 <sht30_init+0xe0>)
 8003dd8:	4798      	blx	r3
       
        return 3;                                                            /* return error */
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e039      	b.n	8003e52 <sht30_init+0xce>
    }
    if (handle->iic_write_address16 == NULL)                                 /* check iic_write_address16 */
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d105      	bne.n	8003df2 <sht30_init+0x6e>
    {
        handle->debug_print("sht30: iic_write_address16 is null.\n");        /* iic_write_address16 is null */
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	481f      	ldr	r0, [pc, #124]	@ (8003e68 <sht30_init+0xe4>)
 8003dec:	4798      	blx	r3
       
        return 3;                                                            /* return error */
 8003dee:	2303      	movs	r3, #3
 8003df0:	e02f      	b.n	8003e52 <sht30_init+0xce>
    }
    if (handle->delay_ms == NULL)                                            /* check delay_ms */
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <sht30_init+0x82>
    {
        handle->debug_print("sht30: delay_ms is null.\n");                   /* delay_ms is null */
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	481b      	ldr	r0, [pc, #108]	@ (8003e6c <sht30_init+0xe8>)
 8003e00:	4798      	blx	r3
       
        return 3;                                                            /* return error */
 8003e02:	2303      	movs	r3, #3
 8003e04:	e025      	b.n	8003e52 <sht30_init+0xce>
    }
    
    if (handle->iic_init() != 0)                                             /* iic init */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4798      	blx	r3
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <sht30_init+0x9a>
    {
        handle->debug_print("sht30: iic init failed.\n");                    /* iic init failed */
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	4816      	ldr	r0, [pc, #88]	@ (8003e70 <sht30_init+0xec>)
 8003e18:	4798      	blx	r3
       
        return 1;                                                            /* return error */
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e019      	b.n	8003e52 <sht30_init+0xce>
    }
    command = SHT30_COMMAND_SOFT_RESET;                                      /* set command */
 8003e1e:	f243 03a2 	movw	r3, #12450	@ 0x30a2
 8003e22:	81fb      	strh	r3, [r7, #14]
    res = a_sht30_write(handle, command);                                    /* write command */
 8003e24:	89fb      	ldrh	r3, [r7, #14]
 8003e26:	4619      	mov	r1, r3
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7ff ff3b 	bl	8003ca4 <a_sht30_write>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	737b      	strb	r3, [r7, #13]
    if (res != 0)                                                            /* check result */
 8003e32:	7b7b      	ldrb	r3, [r7, #13]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <sht30_init+0xc6>
    {
        handle->debug_print("sht30: write command failed.\n");               /* write command failed */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	480d      	ldr	r0, [pc, #52]	@ (8003e74 <sht30_init+0xf0>)
 8003e3e:	4798      	blx	r3
        (void)handle->iic_deinit();                                          /* close iic */
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4798      	blx	r3
        
        return 1;                                                            /* return error */
 8003e46:	2301      	movs	r3, #1
 8003e48:	e003      	b.n	8003e52 <sht30_init+0xce>
    }
    handle->inited = 1;                                                      /* flag finish initialization */
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	769a      	strb	r2, [r3, #26]
    
    return 0;                                                                /* success return 0 */
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	08005074 	.word	0x08005074
 8003e60:	08005090 	.word	0x08005090
 8003e64:	080050ac 	.word	0x080050ac
 8003e68:	080050d0 	.word	0x080050d0
 8003e6c:	080050f8 	.word	0x080050f8
 8003e70:	08005114 	.word	0x08005114
 8003e74:	08005130 	.word	0x08005130

08003e78 <sht30_set_addr_pin>:
 *            - 1 set addr pin failed
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t sht30_set_addr_pin(sht30_handle_t *handle, sht30_address_t addr_pin) 
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <sht30_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e003      	b.n	8003e96 <sht30_set_addr_pin+0x1e>
    }
    
    handle->iic_addr = (uint8_t)addr_pin;        /* set address pin */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	761a      	strb	r2, [r3, #24]
    
    return 0;                                    /* success return 0 */
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <sht30_set_repeatability>:
 *            - 1 set repeatability failed
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t sht30_set_repeatability(sht30_handle_t *handle, sht30_repeatability_t repeatability) 
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                                    /* check handle */
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <sht30_set_repeatability+0x16>
    {
        return 2;                                          /* return error */
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e009      	b.n	8003ecc <sht30_set_repeatability+0x2a>
    }
    if (handle->inited != 1)                               /* check handle initialization */
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7e9b      	ldrb	r3, [r3, #26]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d001      	beq.n	8003ec4 <sht30_set_repeatability+0x22>
    {
        return 3;                                          /* return error */
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e003      	b.n	8003ecc <sht30_set_repeatability+0x2a>
    }
    
    handle->repeatability = (uint8_t)repeatability;        /* set repeatability */
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	78fa      	ldrb	r2, [r7, #3]
 8003ec8:	765a      	strb	r2, [r3, #25]
    
    return 0;                                              /* success return 0 */
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <sht30_continuous_read>:
 * @note       none
 */
uint8_t sht30_continuous_read(sht30_handle_t *handle, 
                              uint16_t *temperature_raw, float *temperature_s, 
                              uint16_t *humidity_raw, float *humidity_s)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint16_t command;
    uint8_t data[6];
    
    if (handle == NULL)                                                            /* check handle */
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <sht30_continuous_read+0x18>
    {
        return 2;                                                                  /* return error */
 8003eec:	2302      	movs	r3, #2
 8003eee:	e078      	b.n	8003fe2 <sht30_continuous_read+0x10a>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	7e9b      	ldrb	r3, [r3, #26]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d001      	beq.n	8003efc <sht30_continuous_read+0x24>
    {
        return 3;                                                                  /* return error */
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e072      	b.n	8003fe2 <sht30_continuous_read+0x10a>
    }
    
    command = SHT30_COMMAND_FETCH_DATA;                                            /* set fetch data */
 8003efc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003f00:	83fb      	strh	r3, [r7, #30]
    res = a_sht30_read(handle, command, (uint8_t *)data, 6);                       /* read data */
 8003f02:	f107 0214 	add.w	r2, r7, #20
 8003f06:	8bf9      	ldrh	r1, [r7, #30]
 8003f08:	2306      	movs	r3, #6
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fee2 	bl	8003cd4 <a_sht30_read>
 8003f10:	4603      	mov	r3, r0
 8003f12:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                  /* check result */
 8003f14:	7f7b      	ldrb	r3, [r7, #29]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <sht30_continuous_read+0x4e>
    {
        handle->debug_print("sht30: read data failed.\n");                         /* read data failed */
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	4833      	ldr	r0, [pc, #204]	@ (8003fec <sht30_continuous_read+0x114>)
 8003f20:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003f22:	2301      	movs	r3, #1
 8003f24:	e05d      	b.n	8003fe2 <sht30_continuous_read+0x10a>
    }
    if (a_sht30_crc((uint8_t *)data, 2) != data[2])                                /* check crc */
 8003f26:	f107 0314 	add.w	r3, r7, #20
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff feed 	bl	8003d0c <a_sht30_crc>
 8003f32:	4603      	mov	r3, r0
 8003f34:	461a      	mov	r2, r3
 8003f36:	7dbb      	ldrb	r3, [r7, #22]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d005      	beq.n	8003f48 <sht30_continuous_read+0x70>
    {
        handle->debug_print("sht30: crc check failed.\n");                         /* crc check failed */
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	482b      	ldr	r0, [pc, #172]	@ (8003ff0 <sht30_continuous_read+0x118>)
 8003f42:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003f44:	2301      	movs	r3, #1
 8003f46:	e04c      	b.n	8003fe2 <sht30_continuous_read+0x10a>
    }
    if (a_sht30_crc((uint8_t *)&data[3], 2) != data[5])                            /* check crc */
 8003f48:	f107 0314 	add.w	r3, r7, #20
 8003f4c:	3303      	adds	r3, #3
 8003f4e:	2102      	movs	r1, #2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fedb 	bl	8003d0c <a_sht30_crc>
 8003f56:	4603      	mov	r3, r0
 8003f58:	461a      	mov	r2, r3
 8003f5a:	7e7b      	ldrb	r3, [r7, #25]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d005      	beq.n	8003f6c <sht30_continuous_read+0x94>
    {
        handle->debug_print("sht30: crc check failed.\n");                         /* crc check failed */
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	4822      	ldr	r0, [pc, #136]	@ (8003ff0 <sht30_continuous_read+0x118>)
 8003f66:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e03a      	b.n	8003fe2 <sht30_continuous_read+0x10a>
    }
    *temperature_raw = (uint16_t)((((uint16_t)data[0]) << 8) | data[1]);           /* get raw temperature */
 8003f6c:	7d3b      	ldrb	r3, [r7, #20]
 8003f6e:	021b      	lsls	r3, r3, #8
 8003f70:	b21a      	sxth	r2, r3
 8003f72:	7d7b      	ldrb	r3, [r7, #21]
 8003f74:	b21b      	sxth	r3, r3
 8003f76:	4313      	orrs	r3, r2
 8003f78:	b21b      	sxth	r3, r3
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	801a      	strh	r2, [r3, #0]
    *humidity_raw = (uint16_t)((((uint16_t)data[3]) << 8) | data[4]);              /* get raw humidity */
 8003f80:	7dfb      	ldrb	r3, [r7, #23]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	b21a      	sxth	r2, r3
 8003f86:	7e3b      	ldrb	r3, [r7, #24]
 8003f88:	b21b      	sxth	r3, r3
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	b21b      	sxth	r3, r3
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	801a      	strh	r2, [r3, #0]
    *temperature_s = (float)(*temperature_raw) / 65535.0f * 175.0f - 45.0f;        /* convert raw temperature */
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	ee07 3a90 	vmov	s15, r3
 8003f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fa0:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8003ff4 <sht30_continuous_read+0x11c>
 8003fa4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fa8:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003ff8 <sht30_continuous_read+0x120>
 8003fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fb0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003ffc <sht30_continuous_read+0x124>
 8003fb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	edc3 7a00 	vstr	s15, [r3]
    *humidity_s = (float)(*humidity_raw) / 65535.0f *100.0f;                       /* convert raw humidity */
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	ee07 3a90 	vmov	s15, r3
 8003fc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fca:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8003ff4 <sht30_continuous_read+0x11c>
 8003fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fd2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8004000 <sht30_continuous_read+0x128>
 8003fd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fdc:	edc3 7a00 	vstr	s15, [r3]
    
    return 0;                                                                      /* success return 0 */
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	080051f0 	.word	0x080051f0
 8003ff0:	08005188 	.word	0x08005188
 8003ff4:	477fff00 	.word	0x477fff00
 8003ff8:	432f0000 	.word	0x432f0000
 8003ffc:	42340000 	.word	0x42340000
 8004000:	42c80000 	.word	0x42c80000

08004004 <sht30_set_art>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t sht30_set_art(sht30_handle_t *handle)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint16_t command;
    
    if (handle == NULL)                                               /* check handle */
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <sht30_set_art+0x12>
    {
        return 2;                                                     /* return error */
 8004012:	2302      	movs	r3, #2
 8004014:	e019      	b.n	800404a <sht30_set_art+0x46>
    }
    if (handle->inited != 1)                                          /* check handle initialization */
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7e9b      	ldrb	r3, [r3, #26]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d001      	beq.n	8004022 <sht30_set_art+0x1e>
    {
        return 3;                                                     /* return error */
 800401e:	2303      	movs	r3, #3
 8004020:	e013      	b.n	800404a <sht30_set_art+0x46>
    }
    
    command = SHT30_COMMAND_ART;                                      /* set command */
 8004022:	f642 3332 	movw	r3, #11058	@ 0x2b32
 8004026:	81fb      	strh	r3, [r7, #14]
    res = a_sht30_write(handle, command);                             /* write command */
 8004028:	89fb      	ldrh	r3, [r7, #14]
 800402a:	4619      	mov	r1, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff fe39 	bl	8003ca4 <a_sht30_write>
 8004032:	4603      	mov	r3, r0
 8004034:	737b      	strb	r3, [r7, #13]
    if (res != 0)                                                     /* check result */
 8004036:	7b7b      	ldrb	r3, [r7, #13]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <sht30_set_art+0x44>
    {
        handle->debug_print("sht30: write command failed.\n");        /* write command failed */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	4804      	ldr	r0, [pc, #16]	@ (8004054 <sht30_set_art+0x50>)
 8004042:	4798      	blx	r3
           
        return 1;                                                     /* return error */
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <sht30_set_art+0x46>
    }
    
    return 0;                                                         /* success return 0 */
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	08005130 	.word	0x08005130

08004058 <sht30_set_heater>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t sht30_set_heater(sht30_handle_t *handle, sht30_bool_t enable)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint16_t command;
    
    if (handle == NULL)                                               /* check handle */
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <sht30_set_heater+0x16>
    {
        return 2;                                                     /* return error */
 800406a:	2302      	movs	r3, #2
 800406c:	e02a      	b.n	80040c4 <sht30_set_heater+0x6c>
    }
    if (handle->inited != 1)                                          /* check handle initialization */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	7e9b      	ldrb	r3, [r3, #26]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d001      	beq.n	800407a <sht30_set_heater+0x22>
    {
        return 3;                                                     /* return error */
 8004076:	2303      	movs	r3, #3
 8004078:	e024      	b.n	80040c4 <sht30_set_heater+0x6c>
    }
    
    if (enable == SHT30_BOOL_TRUE)                                    /* enable heater */
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d103      	bne.n	8004088 <sht30_set_heater+0x30>
    {
        command = SHT30_COMMAND_HEATER_ENABLE;                        /* set enable */
 8004080:	f243 036d 	movw	r3, #12397	@ 0x306d
 8004084:	81fb      	strh	r3, [r7, #14]
 8004086:	e00c      	b.n	80040a2 <sht30_set_heater+0x4a>
    }
    else if (enable == SHT30_BOOL_FALSE)                              /* disable heater */
 8004088:	78fb      	ldrb	r3, [r7, #3]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <sht30_set_heater+0x3e>
    {
        command = SHT30_COMMAND_HEATER_DISABLE;                       /* set disable */
 800408e:	f243 0366 	movw	r3, #12390	@ 0x3066
 8004092:	81fb      	strh	r3, [r7, #14]
 8004094:	e005      	b.n	80040a2 <sht30_set_heater+0x4a>
    }
    else
    {
        handle->debug_print("sht30: bool is invalid.\n");             /* bool is invalid */
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	480c      	ldr	r0, [pc, #48]	@ (80040cc <sht30_set_heater+0x74>)
 800409c:	4798      	blx	r3
           
        return 1;                                                     /* return error */
 800409e:	2301      	movs	r3, #1
 80040a0:	e010      	b.n	80040c4 <sht30_set_heater+0x6c>
    }
    res = a_sht30_write(handle, command);                             /* write command */
 80040a2:	89fb      	ldrh	r3, [r7, #14]
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff fdfc 	bl	8003ca4 <a_sht30_write>
 80040ac:	4603      	mov	r3, r0
 80040ae:	737b      	strb	r3, [r7, #13]
    if (res != 0)                                                     /* check result */
 80040b0:	7b7b      	ldrb	r3, [r7, #13]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d005      	beq.n	80040c2 <sht30_set_heater+0x6a>
    {
        handle->debug_print("sht30: write command failed.\n");        /* write command failed */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	4805      	ldr	r0, [pc, #20]	@ (80040d0 <sht30_set_heater+0x78>)
 80040bc:	4798      	blx	r3
           
        return 1;                                                     /* return error */
 80040be:	2301      	movs	r3, #1
 80040c0:	e000      	b.n	80040c4 <sht30_set_heater+0x6c>
    }
    
    return 0;                                                         /* success return 0 */
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	08005228 	.word	0x08005228
 80040d0:	08005130 	.word	0x08005130

080040d4 <__assert_func>:
 80040d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040d6:	4614      	mov	r4, r2
 80040d8:	461a      	mov	r2, r3
 80040da:	4b09      	ldr	r3, [pc, #36]	@ (8004100 <__assert_func+0x2c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4605      	mov	r5, r0
 80040e0:	68d8      	ldr	r0, [r3, #12]
 80040e2:	b954      	cbnz	r4, 80040fa <__assert_func+0x26>
 80040e4:	4b07      	ldr	r3, [pc, #28]	@ (8004104 <__assert_func+0x30>)
 80040e6:	461c      	mov	r4, r3
 80040e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040ec:	9100      	str	r1, [sp, #0]
 80040ee:	462b      	mov	r3, r5
 80040f0:	4905      	ldr	r1, [pc, #20]	@ (8004108 <__assert_func+0x34>)
 80040f2:	f000 f8b1 	bl	8004258 <fiprintf>
 80040f6:	f000 f9ac 	bl	8004452 <abort>
 80040fa:	4b04      	ldr	r3, [pc, #16]	@ (800410c <__assert_func+0x38>)
 80040fc:	e7f4      	b.n	80040e8 <__assert_func+0x14>
 80040fe:	bf00      	nop
 8004100:	20000018 	.word	0x20000018
 8004104:	08005304 	.word	0x08005304
 8004108:	080052d6 	.word	0x080052d6
 800410c:	080052c9 	.word	0x080052c9

08004110 <std>:
 8004110:	2300      	movs	r3, #0
 8004112:	b510      	push	{r4, lr}
 8004114:	4604      	mov	r4, r0
 8004116:	e9c0 3300 	strd	r3, r3, [r0]
 800411a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800411e:	6083      	str	r3, [r0, #8]
 8004120:	8181      	strh	r1, [r0, #12]
 8004122:	6643      	str	r3, [r0, #100]	@ 0x64
 8004124:	81c2      	strh	r2, [r0, #14]
 8004126:	6183      	str	r3, [r0, #24]
 8004128:	4619      	mov	r1, r3
 800412a:	2208      	movs	r2, #8
 800412c:	305c      	adds	r0, #92	@ 0x5c
 800412e:	f000 f906 	bl	800433e <memset>
 8004132:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <std+0x58>)
 8004134:	6263      	str	r3, [r4, #36]	@ 0x24
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <std+0x5c>)
 8004138:	62a3      	str	r3, [r4, #40]	@ 0x28
 800413a:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <std+0x60>)
 800413c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <std+0x64>)
 8004140:	6323      	str	r3, [r4, #48]	@ 0x30
 8004142:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <std+0x68>)
 8004144:	6224      	str	r4, [r4, #32]
 8004146:	429c      	cmp	r4, r3
 8004148:	d006      	beq.n	8004158 <std+0x48>
 800414a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800414e:	4294      	cmp	r4, r2
 8004150:	d002      	beq.n	8004158 <std+0x48>
 8004152:	33d0      	adds	r3, #208	@ 0xd0
 8004154:	429c      	cmp	r4, r3
 8004156:	d105      	bne.n	8004164 <std+0x54>
 8004158:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800415c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004160:	f000 b966 	b.w	8004430 <__retarget_lock_init_recursive>
 8004164:	bd10      	pop	{r4, pc}
 8004166:	bf00      	nop
 8004168:	080042b9 	.word	0x080042b9
 800416c:	080042db 	.word	0x080042db
 8004170:	08004313 	.word	0x08004313
 8004174:	08004337 	.word	0x08004337
 8004178:	20000154 	.word	0x20000154

0800417c <stdio_exit_handler>:
 800417c:	4a02      	ldr	r2, [pc, #8]	@ (8004188 <stdio_exit_handler+0xc>)
 800417e:	4903      	ldr	r1, [pc, #12]	@ (800418c <stdio_exit_handler+0x10>)
 8004180:	4803      	ldr	r0, [pc, #12]	@ (8004190 <stdio_exit_handler+0x14>)
 8004182:	f000 b87b 	b.w	800427c <_fwalk_sglue>
 8004186:	bf00      	nop
 8004188:	2000000c 	.word	0x2000000c
 800418c:	08004cf9 	.word	0x08004cf9
 8004190:	2000001c 	.word	0x2000001c

08004194 <cleanup_stdio>:
 8004194:	6841      	ldr	r1, [r0, #4]
 8004196:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <cleanup_stdio+0x34>)
 8004198:	4299      	cmp	r1, r3
 800419a:	b510      	push	{r4, lr}
 800419c:	4604      	mov	r4, r0
 800419e:	d001      	beq.n	80041a4 <cleanup_stdio+0x10>
 80041a0:	f000 fdaa 	bl	8004cf8 <_fflush_r>
 80041a4:	68a1      	ldr	r1, [r4, #8]
 80041a6:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <cleanup_stdio+0x38>)
 80041a8:	4299      	cmp	r1, r3
 80041aa:	d002      	beq.n	80041b2 <cleanup_stdio+0x1e>
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 fda3 	bl	8004cf8 <_fflush_r>
 80041b2:	68e1      	ldr	r1, [r4, #12]
 80041b4:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <cleanup_stdio+0x3c>)
 80041b6:	4299      	cmp	r1, r3
 80041b8:	d004      	beq.n	80041c4 <cleanup_stdio+0x30>
 80041ba:	4620      	mov	r0, r4
 80041bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c0:	f000 bd9a 	b.w	8004cf8 <_fflush_r>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	bf00      	nop
 80041c8:	20000154 	.word	0x20000154
 80041cc:	200001bc 	.word	0x200001bc
 80041d0:	20000224 	.word	0x20000224

080041d4 <global_stdio_init.part.0>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <global_stdio_init.part.0+0x30>)
 80041d8:	4c0b      	ldr	r4, [pc, #44]	@ (8004208 <global_stdio_init.part.0+0x34>)
 80041da:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <global_stdio_init.part.0+0x38>)
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	4620      	mov	r0, r4
 80041e0:	2200      	movs	r2, #0
 80041e2:	2104      	movs	r1, #4
 80041e4:	f7ff ff94 	bl	8004110 <std>
 80041e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041ec:	2201      	movs	r2, #1
 80041ee:	2109      	movs	r1, #9
 80041f0:	f7ff ff8e 	bl	8004110 <std>
 80041f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041f8:	2202      	movs	r2, #2
 80041fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041fe:	2112      	movs	r1, #18
 8004200:	f7ff bf86 	b.w	8004110 <std>
 8004204:	2000028c 	.word	0x2000028c
 8004208:	20000154 	.word	0x20000154
 800420c:	0800417d 	.word	0x0800417d

08004210 <__sfp_lock_acquire>:
 8004210:	4801      	ldr	r0, [pc, #4]	@ (8004218 <__sfp_lock_acquire+0x8>)
 8004212:	f000 b90e 	b.w	8004432 <__retarget_lock_acquire_recursive>
 8004216:	bf00      	nop
 8004218:	20000295 	.word	0x20000295

0800421c <__sfp_lock_release>:
 800421c:	4801      	ldr	r0, [pc, #4]	@ (8004224 <__sfp_lock_release+0x8>)
 800421e:	f000 b909 	b.w	8004434 <__retarget_lock_release_recursive>
 8004222:	bf00      	nop
 8004224:	20000295 	.word	0x20000295

08004228 <__sinit>:
 8004228:	b510      	push	{r4, lr}
 800422a:	4604      	mov	r4, r0
 800422c:	f7ff fff0 	bl	8004210 <__sfp_lock_acquire>
 8004230:	6a23      	ldr	r3, [r4, #32]
 8004232:	b11b      	cbz	r3, 800423c <__sinit+0x14>
 8004234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004238:	f7ff bff0 	b.w	800421c <__sfp_lock_release>
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <__sinit+0x28>)
 800423e:	6223      	str	r3, [r4, #32]
 8004240:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <__sinit+0x2c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f5      	bne.n	8004234 <__sinit+0xc>
 8004248:	f7ff ffc4 	bl	80041d4 <global_stdio_init.part.0>
 800424c:	e7f2      	b.n	8004234 <__sinit+0xc>
 800424e:	bf00      	nop
 8004250:	08004195 	.word	0x08004195
 8004254:	2000028c 	.word	0x2000028c

08004258 <fiprintf>:
 8004258:	b40e      	push	{r1, r2, r3}
 800425a:	b503      	push	{r0, r1, lr}
 800425c:	4601      	mov	r1, r0
 800425e:	ab03      	add	r3, sp, #12
 8004260:	4805      	ldr	r0, [pc, #20]	@ (8004278 <fiprintf+0x20>)
 8004262:	f853 2b04 	ldr.w	r2, [r3], #4
 8004266:	6800      	ldr	r0, [r0, #0]
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	f000 fa1b 	bl	80046a4 <_vfiprintf_r>
 800426e:	b002      	add	sp, #8
 8004270:	f85d eb04 	ldr.w	lr, [sp], #4
 8004274:	b003      	add	sp, #12
 8004276:	4770      	bx	lr
 8004278:	20000018 	.word	0x20000018

0800427c <_fwalk_sglue>:
 800427c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004280:	4607      	mov	r7, r0
 8004282:	4688      	mov	r8, r1
 8004284:	4614      	mov	r4, r2
 8004286:	2600      	movs	r6, #0
 8004288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800428c:	f1b9 0901 	subs.w	r9, r9, #1
 8004290:	d505      	bpl.n	800429e <_fwalk_sglue+0x22>
 8004292:	6824      	ldr	r4, [r4, #0]
 8004294:	2c00      	cmp	r4, #0
 8004296:	d1f7      	bne.n	8004288 <_fwalk_sglue+0xc>
 8004298:	4630      	mov	r0, r6
 800429a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800429e:	89ab      	ldrh	r3, [r5, #12]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d907      	bls.n	80042b4 <_fwalk_sglue+0x38>
 80042a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042a8:	3301      	adds	r3, #1
 80042aa:	d003      	beq.n	80042b4 <_fwalk_sglue+0x38>
 80042ac:	4629      	mov	r1, r5
 80042ae:	4638      	mov	r0, r7
 80042b0:	47c0      	blx	r8
 80042b2:	4306      	orrs	r6, r0
 80042b4:	3568      	adds	r5, #104	@ 0x68
 80042b6:	e7e9      	b.n	800428c <_fwalk_sglue+0x10>

080042b8 <__sread>:
 80042b8:	b510      	push	{r4, lr}
 80042ba:	460c      	mov	r4, r1
 80042bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c0:	f000 f868 	bl	8004394 <_read_r>
 80042c4:	2800      	cmp	r0, #0
 80042c6:	bfab      	itete	ge
 80042c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042ca:	89a3      	ldrhlt	r3, [r4, #12]
 80042cc:	181b      	addge	r3, r3, r0
 80042ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042d2:	bfac      	ite	ge
 80042d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042d6:	81a3      	strhlt	r3, [r4, #12]
 80042d8:	bd10      	pop	{r4, pc}

080042da <__swrite>:
 80042da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042de:	461f      	mov	r7, r3
 80042e0:	898b      	ldrh	r3, [r1, #12]
 80042e2:	05db      	lsls	r3, r3, #23
 80042e4:	4605      	mov	r5, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	4616      	mov	r6, r2
 80042ea:	d505      	bpl.n	80042f8 <__swrite+0x1e>
 80042ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f0:	2302      	movs	r3, #2
 80042f2:	2200      	movs	r2, #0
 80042f4:	f000 f83c 	bl	8004370 <_lseek_r>
 80042f8:	89a3      	ldrh	r3, [r4, #12]
 80042fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004302:	81a3      	strh	r3, [r4, #12]
 8004304:	4632      	mov	r2, r6
 8004306:	463b      	mov	r3, r7
 8004308:	4628      	mov	r0, r5
 800430a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800430e:	f000 b853 	b.w	80043b8 <_write_r>

08004312 <__sseek>:
 8004312:	b510      	push	{r4, lr}
 8004314:	460c      	mov	r4, r1
 8004316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800431a:	f000 f829 	bl	8004370 <_lseek_r>
 800431e:	1c43      	adds	r3, r0, #1
 8004320:	89a3      	ldrh	r3, [r4, #12]
 8004322:	bf15      	itete	ne
 8004324:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004326:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800432a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800432e:	81a3      	strheq	r3, [r4, #12]
 8004330:	bf18      	it	ne
 8004332:	81a3      	strhne	r3, [r4, #12]
 8004334:	bd10      	pop	{r4, pc}

08004336 <__sclose>:
 8004336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800433a:	f000 b809 	b.w	8004350 <_close_r>

0800433e <memset>:
 800433e:	4402      	add	r2, r0
 8004340:	4603      	mov	r3, r0
 8004342:	4293      	cmp	r3, r2
 8004344:	d100      	bne.n	8004348 <memset+0xa>
 8004346:	4770      	bx	lr
 8004348:	f803 1b01 	strb.w	r1, [r3], #1
 800434c:	e7f9      	b.n	8004342 <memset+0x4>
	...

08004350 <_close_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	4d06      	ldr	r5, [pc, #24]	@ (800436c <_close_r+0x1c>)
 8004354:	2300      	movs	r3, #0
 8004356:	4604      	mov	r4, r0
 8004358:	4608      	mov	r0, r1
 800435a:	602b      	str	r3, [r5, #0]
 800435c:	f7fc f980 	bl	8000660 <_close>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_close_r+0x1a>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	b103      	cbz	r3, 800436a <_close_r+0x1a>
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	20000290 	.word	0x20000290

08004370 <_lseek_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4d07      	ldr	r5, [pc, #28]	@ (8004390 <_lseek_r+0x20>)
 8004374:	4604      	mov	r4, r0
 8004376:	4608      	mov	r0, r1
 8004378:	4611      	mov	r1, r2
 800437a:	2200      	movs	r2, #0
 800437c:	602a      	str	r2, [r5, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	f7fc f995 	bl	80006ae <_lseek>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d102      	bne.n	800438e <_lseek_r+0x1e>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	b103      	cbz	r3, 800438e <_lseek_r+0x1e>
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	20000290 	.word	0x20000290

08004394 <_read_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4d07      	ldr	r5, [pc, #28]	@ (80043b4 <_read_r+0x20>)
 8004398:	4604      	mov	r4, r0
 800439a:	4608      	mov	r0, r1
 800439c:	4611      	mov	r1, r2
 800439e:	2200      	movs	r2, #0
 80043a0:	602a      	str	r2, [r5, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f7fc f923 	bl	80005ee <_read>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d102      	bne.n	80043b2 <_read_r+0x1e>
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	b103      	cbz	r3, 80043b2 <_read_r+0x1e>
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	20000290 	.word	0x20000290

080043b8 <_write_r>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	4d07      	ldr	r5, [pc, #28]	@ (80043d8 <_write_r+0x20>)
 80043bc:	4604      	mov	r4, r0
 80043be:	4608      	mov	r0, r1
 80043c0:	4611      	mov	r1, r2
 80043c2:	2200      	movs	r2, #0
 80043c4:	602a      	str	r2, [r5, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f7fc f92e 	bl	8000628 <_write>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_write_r+0x1e>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_write_r+0x1e>
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	20000290 	.word	0x20000290

080043dc <__errno>:
 80043dc:	4b01      	ldr	r3, [pc, #4]	@ (80043e4 <__errno+0x8>)
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	20000018 	.word	0x20000018

080043e8 <__libc_init_array>:
 80043e8:	b570      	push	{r4, r5, r6, lr}
 80043ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004420 <__libc_init_array+0x38>)
 80043ec:	4c0d      	ldr	r4, [pc, #52]	@ (8004424 <__libc_init_array+0x3c>)
 80043ee:	1b64      	subs	r4, r4, r5
 80043f0:	10a4      	asrs	r4, r4, #2
 80043f2:	2600      	movs	r6, #0
 80043f4:	42a6      	cmp	r6, r4
 80043f6:	d109      	bne.n	800440c <__libc_init_array+0x24>
 80043f8:	4d0b      	ldr	r5, [pc, #44]	@ (8004428 <__libc_init_array+0x40>)
 80043fa:	4c0c      	ldr	r4, [pc, #48]	@ (800442c <__libc_init_array+0x44>)
 80043fc:	f000 fe10 	bl	8005020 <_init>
 8004400:	1b64      	subs	r4, r4, r5
 8004402:	10a4      	asrs	r4, r4, #2
 8004404:	2600      	movs	r6, #0
 8004406:	42a6      	cmp	r6, r4
 8004408:	d105      	bne.n	8004416 <__libc_init_array+0x2e>
 800440a:	bd70      	pop	{r4, r5, r6, pc}
 800440c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004410:	4798      	blx	r3
 8004412:	3601      	adds	r6, #1
 8004414:	e7ee      	b.n	80043f4 <__libc_init_array+0xc>
 8004416:	f855 3b04 	ldr.w	r3, [r5], #4
 800441a:	4798      	blx	r3
 800441c:	3601      	adds	r6, #1
 800441e:	e7f2      	b.n	8004406 <__libc_init_array+0x1e>
 8004420:	08005340 	.word	0x08005340
 8004424:	08005340 	.word	0x08005340
 8004428:	08005340 	.word	0x08005340
 800442c:	08005344 	.word	0x08005344

08004430 <__retarget_lock_init_recursive>:
 8004430:	4770      	bx	lr

08004432 <__retarget_lock_acquire_recursive>:
 8004432:	4770      	bx	lr

08004434 <__retarget_lock_release_recursive>:
 8004434:	4770      	bx	lr

08004436 <memcpy>:
 8004436:	440a      	add	r2, r1
 8004438:	4291      	cmp	r1, r2
 800443a:	f100 33ff 	add.w	r3, r0, #4294967295
 800443e:	d100      	bne.n	8004442 <memcpy+0xc>
 8004440:	4770      	bx	lr
 8004442:	b510      	push	{r4, lr}
 8004444:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800444c:	4291      	cmp	r1, r2
 800444e:	d1f9      	bne.n	8004444 <memcpy+0xe>
 8004450:	bd10      	pop	{r4, pc}

08004452 <abort>:
 8004452:	b508      	push	{r3, lr}
 8004454:	2006      	movs	r0, #6
 8004456:	f000 fd33 	bl	8004ec0 <raise>
 800445a:	2001      	movs	r0, #1
 800445c:	f7fc f8bc 	bl	80005d8 <_exit>

08004460 <_free_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4605      	mov	r5, r0
 8004464:	2900      	cmp	r1, #0
 8004466:	d041      	beq.n	80044ec <_free_r+0x8c>
 8004468:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800446c:	1f0c      	subs	r4, r1, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	bfb8      	it	lt
 8004472:	18e4      	addlt	r4, r4, r3
 8004474:	f000 f8e0 	bl	8004638 <__malloc_lock>
 8004478:	4a1d      	ldr	r2, [pc, #116]	@ (80044f0 <_free_r+0x90>)
 800447a:	6813      	ldr	r3, [r2, #0]
 800447c:	b933      	cbnz	r3, 800448c <_free_r+0x2c>
 800447e:	6063      	str	r3, [r4, #4]
 8004480:	6014      	str	r4, [r2, #0]
 8004482:	4628      	mov	r0, r5
 8004484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004488:	f000 b8dc 	b.w	8004644 <__malloc_unlock>
 800448c:	42a3      	cmp	r3, r4
 800448e:	d908      	bls.n	80044a2 <_free_r+0x42>
 8004490:	6820      	ldr	r0, [r4, #0]
 8004492:	1821      	adds	r1, r4, r0
 8004494:	428b      	cmp	r3, r1
 8004496:	bf01      	itttt	eq
 8004498:	6819      	ldreq	r1, [r3, #0]
 800449a:	685b      	ldreq	r3, [r3, #4]
 800449c:	1809      	addeq	r1, r1, r0
 800449e:	6021      	streq	r1, [r4, #0]
 80044a0:	e7ed      	b.n	800447e <_free_r+0x1e>
 80044a2:	461a      	mov	r2, r3
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	b10b      	cbz	r3, 80044ac <_free_r+0x4c>
 80044a8:	42a3      	cmp	r3, r4
 80044aa:	d9fa      	bls.n	80044a2 <_free_r+0x42>
 80044ac:	6811      	ldr	r1, [r2, #0]
 80044ae:	1850      	adds	r0, r2, r1
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d10b      	bne.n	80044cc <_free_r+0x6c>
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	4401      	add	r1, r0
 80044b8:	1850      	adds	r0, r2, r1
 80044ba:	4283      	cmp	r3, r0
 80044bc:	6011      	str	r1, [r2, #0]
 80044be:	d1e0      	bne.n	8004482 <_free_r+0x22>
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	6053      	str	r3, [r2, #4]
 80044c6:	4408      	add	r0, r1
 80044c8:	6010      	str	r0, [r2, #0]
 80044ca:	e7da      	b.n	8004482 <_free_r+0x22>
 80044cc:	d902      	bls.n	80044d4 <_free_r+0x74>
 80044ce:	230c      	movs	r3, #12
 80044d0:	602b      	str	r3, [r5, #0]
 80044d2:	e7d6      	b.n	8004482 <_free_r+0x22>
 80044d4:	6820      	ldr	r0, [r4, #0]
 80044d6:	1821      	adds	r1, r4, r0
 80044d8:	428b      	cmp	r3, r1
 80044da:	bf04      	itt	eq
 80044dc:	6819      	ldreq	r1, [r3, #0]
 80044de:	685b      	ldreq	r3, [r3, #4]
 80044e0:	6063      	str	r3, [r4, #4]
 80044e2:	bf04      	itt	eq
 80044e4:	1809      	addeq	r1, r1, r0
 80044e6:	6021      	streq	r1, [r4, #0]
 80044e8:	6054      	str	r4, [r2, #4]
 80044ea:	e7ca      	b.n	8004482 <_free_r+0x22>
 80044ec:	bd38      	pop	{r3, r4, r5, pc}
 80044ee:	bf00      	nop
 80044f0:	2000029c 	.word	0x2000029c

080044f4 <sbrk_aligned>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	4e0f      	ldr	r6, [pc, #60]	@ (8004534 <sbrk_aligned+0x40>)
 80044f8:	460c      	mov	r4, r1
 80044fa:	6831      	ldr	r1, [r6, #0]
 80044fc:	4605      	mov	r5, r0
 80044fe:	b911      	cbnz	r1, 8004506 <sbrk_aligned+0x12>
 8004500:	f000 fcfa 	bl	8004ef8 <_sbrk_r>
 8004504:	6030      	str	r0, [r6, #0]
 8004506:	4621      	mov	r1, r4
 8004508:	4628      	mov	r0, r5
 800450a:	f000 fcf5 	bl	8004ef8 <_sbrk_r>
 800450e:	1c43      	adds	r3, r0, #1
 8004510:	d103      	bne.n	800451a <sbrk_aligned+0x26>
 8004512:	f04f 34ff 	mov.w	r4, #4294967295
 8004516:	4620      	mov	r0, r4
 8004518:	bd70      	pop	{r4, r5, r6, pc}
 800451a:	1cc4      	adds	r4, r0, #3
 800451c:	f024 0403 	bic.w	r4, r4, #3
 8004520:	42a0      	cmp	r0, r4
 8004522:	d0f8      	beq.n	8004516 <sbrk_aligned+0x22>
 8004524:	1a21      	subs	r1, r4, r0
 8004526:	4628      	mov	r0, r5
 8004528:	f000 fce6 	bl	8004ef8 <_sbrk_r>
 800452c:	3001      	adds	r0, #1
 800452e:	d1f2      	bne.n	8004516 <sbrk_aligned+0x22>
 8004530:	e7ef      	b.n	8004512 <sbrk_aligned+0x1e>
 8004532:	bf00      	nop
 8004534:	20000298 	.word	0x20000298

08004538 <_malloc_r>:
 8004538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800453c:	1ccd      	adds	r5, r1, #3
 800453e:	f025 0503 	bic.w	r5, r5, #3
 8004542:	3508      	adds	r5, #8
 8004544:	2d0c      	cmp	r5, #12
 8004546:	bf38      	it	cc
 8004548:	250c      	movcc	r5, #12
 800454a:	2d00      	cmp	r5, #0
 800454c:	4606      	mov	r6, r0
 800454e:	db01      	blt.n	8004554 <_malloc_r+0x1c>
 8004550:	42a9      	cmp	r1, r5
 8004552:	d904      	bls.n	800455e <_malloc_r+0x26>
 8004554:	230c      	movs	r3, #12
 8004556:	6033      	str	r3, [r6, #0]
 8004558:	2000      	movs	r0, #0
 800455a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800455e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004634 <_malloc_r+0xfc>
 8004562:	f000 f869 	bl	8004638 <__malloc_lock>
 8004566:	f8d8 3000 	ldr.w	r3, [r8]
 800456a:	461c      	mov	r4, r3
 800456c:	bb44      	cbnz	r4, 80045c0 <_malloc_r+0x88>
 800456e:	4629      	mov	r1, r5
 8004570:	4630      	mov	r0, r6
 8004572:	f7ff ffbf 	bl	80044f4 <sbrk_aligned>
 8004576:	1c43      	adds	r3, r0, #1
 8004578:	4604      	mov	r4, r0
 800457a:	d158      	bne.n	800462e <_malloc_r+0xf6>
 800457c:	f8d8 4000 	ldr.w	r4, [r8]
 8004580:	4627      	mov	r7, r4
 8004582:	2f00      	cmp	r7, #0
 8004584:	d143      	bne.n	800460e <_malloc_r+0xd6>
 8004586:	2c00      	cmp	r4, #0
 8004588:	d04b      	beq.n	8004622 <_malloc_r+0xea>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	4639      	mov	r1, r7
 800458e:	4630      	mov	r0, r6
 8004590:	eb04 0903 	add.w	r9, r4, r3
 8004594:	f000 fcb0 	bl	8004ef8 <_sbrk_r>
 8004598:	4581      	cmp	r9, r0
 800459a:	d142      	bne.n	8004622 <_malloc_r+0xea>
 800459c:	6821      	ldr	r1, [r4, #0]
 800459e:	1a6d      	subs	r5, r5, r1
 80045a0:	4629      	mov	r1, r5
 80045a2:	4630      	mov	r0, r6
 80045a4:	f7ff ffa6 	bl	80044f4 <sbrk_aligned>
 80045a8:	3001      	adds	r0, #1
 80045aa:	d03a      	beq.n	8004622 <_malloc_r+0xea>
 80045ac:	6823      	ldr	r3, [r4, #0]
 80045ae:	442b      	add	r3, r5
 80045b0:	6023      	str	r3, [r4, #0]
 80045b2:	f8d8 3000 	ldr.w	r3, [r8]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	bb62      	cbnz	r2, 8004614 <_malloc_r+0xdc>
 80045ba:	f8c8 7000 	str.w	r7, [r8]
 80045be:	e00f      	b.n	80045e0 <_malloc_r+0xa8>
 80045c0:	6822      	ldr	r2, [r4, #0]
 80045c2:	1b52      	subs	r2, r2, r5
 80045c4:	d420      	bmi.n	8004608 <_malloc_r+0xd0>
 80045c6:	2a0b      	cmp	r2, #11
 80045c8:	d917      	bls.n	80045fa <_malloc_r+0xc2>
 80045ca:	1961      	adds	r1, r4, r5
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	6025      	str	r5, [r4, #0]
 80045d0:	bf18      	it	ne
 80045d2:	6059      	strne	r1, [r3, #4]
 80045d4:	6863      	ldr	r3, [r4, #4]
 80045d6:	bf08      	it	eq
 80045d8:	f8c8 1000 	streq.w	r1, [r8]
 80045dc:	5162      	str	r2, [r4, r5]
 80045de:	604b      	str	r3, [r1, #4]
 80045e0:	4630      	mov	r0, r6
 80045e2:	f000 f82f 	bl	8004644 <__malloc_unlock>
 80045e6:	f104 000b 	add.w	r0, r4, #11
 80045ea:	1d23      	adds	r3, r4, #4
 80045ec:	f020 0007 	bic.w	r0, r0, #7
 80045f0:	1ac2      	subs	r2, r0, r3
 80045f2:	bf1c      	itt	ne
 80045f4:	1a1b      	subne	r3, r3, r0
 80045f6:	50a3      	strne	r3, [r4, r2]
 80045f8:	e7af      	b.n	800455a <_malloc_r+0x22>
 80045fa:	6862      	ldr	r2, [r4, #4]
 80045fc:	42a3      	cmp	r3, r4
 80045fe:	bf0c      	ite	eq
 8004600:	f8c8 2000 	streq.w	r2, [r8]
 8004604:	605a      	strne	r2, [r3, #4]
 8004606:	e7eb      	b.n	80045e0 <_malloc_r+0xa8>
 8004608:	4623      	mov	r3, r4
 800460a:	6864      	ldr	r4, [r4, #4]
 800460c:	e7ae      	b.n	800456c <_malloc_r+0x34>
 800460e:	463c      	mov	r4, r7
 8004610:	687f      	ldr	r7, [r7, #4]
 8004612:	e7b6      	b.n	8004582 <_malloc_r+0x4a>
 8004614:	461a      	mov	r2, r3
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	42a3      	cmp	r3, r4
 800461a:	d1fb      	bne.n	8004614 <_malloc_r+0xdc>
 800461c:	2300      	movs	r3, #0
 800461e:	6053      	str	r3, [r2, #4]
 8004620:	e7de      	b.n	80045e0 <_malloc_r+0xa8>
 8004622:	230c      	movs	r3, #12
 8004624:	6033      	str	r3, [r6, #0]
 8004626:	4630      	mov	r0, r6
 8004628:	f000 f80c 	bl	8004644 <__malloc_unlock>
 800462c:	e794      	b.n	8004558 <_malloc_r+0x20>
 800462e:	6005      	str	r5, [r0, #0]
 8004630:	e7d6      	b.n	80045e0 <_malloc_r+0xa8>
 8004632:	bf00      	nop
 8004634:	2000029c 	.word	0x2000029c

08004638 <__malloc_lock>:
 8004638:	4801      	ldr	r0, [pc, #4]	@ (8004640 <__malloc_lock+0x8>)
 800463a:	f7ff befa 	b.w	8004432 <__retarget_lock_acquire_recursive>
 800463e:	bf00      	nop
 8004640:	20000294 	.word	0x20000294

08004644 <__malloc_unlock>:
 8004644:	4801      	ldr	r0, [pc, #4]	@ (800464c <__malloc_unlock+0x8>)
 8004646:	f7ff bef5 	b.w	8004434 <__retarget_lock_release_recursive>
 800464a:	bf00      	nop
 800464c:	20000294 	.word	0x20000294

08004650 <__sfputc_r>:
 8004650:	6893      	ldr	r3, [r2, #8]
 8004652:	3b01      	subs	r3, #1
 8004654:	2b00      	cmp	r3, #0
 8004656:	b410      	push	{r4}
 8004658:	6093      	str	r3, [r2, #8]
 800465a:	da08      	bge.n	800466e <__sfputc_r+0x1e>
 800465c:	6994      	ldr	r4, [r2, #24]
 800465e:	42a3      	cmp	r3, r4
 8004660:	db01      	blt.n	8004666 <__sfputc_r+0x16>
 8004662:	290a      	cmp	r1, #10
 8004664:	d103      	bne.n	800466e <__sfputc_r+0x1e>
 8004666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800466a:	f000 bb6d 	b.w	8004d48 <__swbuf_r>
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	1c58      	adds	r0, r3, #1
 8004672:	6010      	str	r0, [r2, #0]
 8004674:	7019      	strb	r1, [r3, #0]
 8004676:	4608      	mov	r0, r1
 8004678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800467c:	4770      	bx	lr

0800467e <__sfputs_r>:
 800467e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004680:	4606      	mov	r6, r0
 8004682:	460f      	mov	r7, r1
 8004684:	4614      	mov	r4, r2
 8004686:	18d5      	adds	r5, r2, r3
 8004688:	42ac      	cmp	r4, r5
 800468a:	d101      	bne.n	8004690 <__sfputs_r+0x12>
 800468c:	2000      	movs	r0, #0
 800468e:	e007      	b.n	80046a0 <__sfputs_r+0x22>
 8004690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004694:	463a      	mov	r2, r7
 8004696:	4630      	mov	r0, r6
 8004698:	f7ff ffda 	bl	8004650 <__sfputc_r>
 800469c:	1c43      	adds	r3, r0, #1
 800469e:	d1f3      	bne.n	8004688 <__sfputs_r+0xa>
 80046a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046a4 <_vfiprintf_r>:
 80046a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a8:	460d      	mov	r5, r1
 80046aa:	b09d      	sub	sp, #116	@ 0x74
 80046ac:	4614      	mov	r4, r2
 80046ae:	4698      	mov	r8, r3
 80046b0:	4606      	mov	r6, r0
 80046b2:	b118      	cbz	r0, 80046bc <_vfiprintf_r+0x18>
 80046b4:	6a03      	ldr	r3, [r0, #32]
 80046b6:	b90b      	cbnz	r3, 80046bc <_vfiprintf_r+0x18>
 80046b8:	f7ff fdb6 	bl	8004228 <__sinit>
 80046bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046be:	07d9      	lsls	r1, r3, #31
 80046c0:	d405      	bmi.n	80046ce <_vfiprintf_r+0x2a>
 80046c2:	89ab      	ldrh	r3, [r5, #12]
 80046c4:	059a      	lsls	r2, r3, #22
 80046c6:	d402      	bmi.n	80046ce <_vfiprintf_r+0x2a>
 80046c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046ca:	f7ff feb2 	bl	8004432 <__retarget_lock_acquire_recursive>
 80046ce:	89ab      	ldrh	r3, [r5, #12]
 80046d0:	071b      	lsls	r3, r3, #28
 80046d2:	d501      	bpl.n	80046d8 <_vfiprintf_r+0x34>
 80046d4:	692b      	ldr	r3, [r5, #16]
 80046d6:	b99b      	cbnz	r3, 8004700 <_vfiprintf_r+0x5c>
 80046d8:	4629      	mov	r1, r5
 80046da:	4630      	mov	r0, r6
 80046dc:	f000 fb72 	bl	8004dc4 <__swsetup_r>
 80046e0:	b170      	cbz	r0, 8004700 <_vfiprintf_r+0x5c>
 80046e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046e4:	07dc      	lsls	r4, r3, #31
 80046e6:	d504      	bpl.n	80046f2 <_vfiprintf_r+0x4e>
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	b01d      	add	sp, #116	@ 0x74
 80046ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f2:	89ab      	ldrh	r3, [r5, #12]
 80046f4:	0598      	lsls	r0, r3, #22
 80046f6:	d4f7      	bmi.n	80046e8 <_vfiprintf_r+0x44>
 80046f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046fa:	f7ff fe9b 	bl	8004434 <__retarget_lock_release_recursive>
 80046fe:	e7f3      	b.n	80046e8 <_vfiprintf_r+0x44>
 8004700:	2300      	movs	r3, #0
 8004702:	9309      	str	r3, [sp, #36]	@ 0x24
 8004704:	2320      	movs	r3, #32
 8004706:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800470a:	f8cd 800c 	str.w	r8, [sp, #12]
 800470e:	2330      	movs	r3, #48	@ 0x30
 8004710:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80048c0 <_vfiprintf_r+0x21c>
 8004714:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004718:	f04f 0901 	mov.w	r9, #1
 800471c:	4623      	mov	r3, r4
 800471e:	469a      	mov	sl, r3
 8004720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004724:	b10a      	cbz	r2, 800472a <_vfiprintf_r+0x86>
 8004726:	2a25      	cmp	r2, #37	@ 0x25
 8004728:	d1f9      	bne.n	800471e <_vfiprintf_r+0x7a>
 800472a:	ebba 0b04 	subs.w	fp, sl, r4
 800472e:	d00b      	beq.n	8004748 <_vfiprintf_r+0xa4>
 8004730:	465b      	mov	r3, fp
 8004732:	4622      	mov	r2, r4
 8004734:	4629      	mov	r1, r5
 8004736:	4630      	mov	r0, r6
 8004738:	f7ff ffa1 	bl	800467e <__sfputs_r>
 800473c:	3001      	adds	r0, #1
 800473e:	f000 80a7 	beq.w	8004890 <_vfiprintf_r+0x1ec>
 8004742:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004744:	445a      	add	r2, fp
 8004746:	9209      	str	r2, [sp, #36]	@ 0x24
 8004748:	f89a 3000 	ldrb.w	r3, [sl]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 809f 	beq.w	8004890 <_vfiprintf_r+0x1ec>
 8004752:	2300      	movs	r3, #0
 8004754:	f04f 32ff 	mov.w	r2, #4294967295
 8004758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800475c:	f10a 0a01 	add.w	sl, sl, #1
 8004760:	9304      	str	r3, [sp, #16]
 8004762:	9307      	str	r3, [sp, #28]
 8004764:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004768:	931a      	str	r3, [sp, #104]	@ 0x68
 800476a:	4654      	mov	r4, sl
 800476c:	2205      	movs	r2, #5
 800476e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004772:	4853      	ldr	r0, [pc, #332]	@ (80048c0 <_vfiprintf_r+0x21c>)
 8004774:	f7fb fd2c 	bl	80001d0 <memchr>
 8004778:	9a04      	ldr	r2, [sp, #16]
 800477a:	b9d8      	cbnz	r0, 80047b4 <_vfiprintf_r+0x110>
 800477c:	06d1      	lsls	r1, r2, #27
 800477e:	bf44      	itt	mi
 8004780:	2320      	movmi	r3, #32
 8004782:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004786:	0713      	lsls	r3, r2, #28
 8004788:	bf44      	itt	mi
 800478a:	232b      	movmi	r3, #43	@ 0x2b
 800478c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004790:	f89a 3000 	ldrb.w	r3, [sl]
 8004794:	2b2a      	cmp	r3, #42	@ 0x2a
 8004796:	d015      	beq.n	80047c4 <_vfiprintf_r+0x120>
 8004798:	9a07      	ldr	r2, [sp, #28]
 800479a:	4654      	mov	r4, sl
 800479c:	2000      	movs	r0, #0
 800479e:	f04f 0c0a 	mov.w	ip, #10
 80047a2:	4621      	mov	r1, r4
 80047a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047a8:	3b30      	subs	r3, #48	@ 0x30
 80047aa:	2b09      	cmp	r3, #9
 80047ac:	d94b      	bls.n	8004846 <_vfiprintf_r+0x1a2>
 80047ae:	b1b0      	cbz	r0, 80047de <_vfiprintf_r+0x13a>
 80047b0:	9207      	str	r2, [sp, #28]
 80047b2:	e014      	b.n	80047de <_vfiprintf_r+0x13a>
 80047b4:	eba0 0308 	sub.w	r3, r0, r8
 80047b8:	fa09 f303 	lsl.w	r3, r9, r3
 80047bc:	4313      	orrs	r3, r2
 80047be:	9304      	str	r3, [sp, #16]
 80047c0:	46a2      	mov	sl, r4
 80047c2:	e7d2      	b.n	800476a <_vfiprintf_r+0xc6>
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	1d19      	adds	r1, r3, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	9103      	str	r1, [sp, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bfbb      	ittet	lt
 80047d0:	425b      	neglt	r3, r3
 80047d2:	f042 0202 	orrlt.w	r2, r2, #2
 80047d6:	9307      	strge	r3, [sp, #28]
 80047d8:	9307      	strlt	r3, [sp, #28]
 80047da:	bfb8      	it	lt
 80047dc:	9204      	strlt	r2, [sp, #16]
 80047de:	7823      	ldrb	r3, [r4, #0]
 80047e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80047e2:	d10a      	bne.n	80047fa <_vfiprintf_r+0x156>
 80047e4:	7863      	ldrb	r3, [r4, #1]
 80047e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80047e8:	d132      	bne.n	8004850 <_vfiprintf_r+0x1ac>
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	1d1a      	adds	r2, r3, #4
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	9203      	str	r2, [sp, #12]
 80047f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047f6:	3402      	adds	r4, #2
 80047f8:	9305      	str	r3, [sp, #20]
 80047fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80048d0 <_vfiprintf_r+0x22c>
 80047fe:	7821      	ldrb	r1, [r4, #0]
 8004800:	2203      	movs	r2, #3
 8004802:	4650      	mov	r0, sl
 8004804:	f7fb fce4 	bl	80001d0 <memchr>
 8004808:	b138      	cbz	r0, 800481a <_vfiprintf_r+0x176>
 800480a:	9b04      	ldr	r3, [sp, #16]
 800480c:	eba0 000a 	sub.w	r0, r0, sl
 8004810:	2240      	movs	r2, #64	@ 0x40
 8004812:	4082      	lsls	r2, r0
 8004814:	4313      	orrs	r3, r2
 8004816:	3401      	adds	r4, #1
 8004818:	9304      	str	r3, [sp, #16]
 800481a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800481e:	4829      	ldr	r0, [pc, #164]	@ (80048c4 <_vfiprintf_r+0x220>)
 8004820:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004824:	2206      	movs	r2, #6
 8004826:	f7fb fcd3 	bl	80001d0 <memchr>
 800482a:	2800      	cmp	r0, #0
 800482c:	d03f      	beq.n	80048ae <_vfiprintf_r+0x20a>
 800482e:	4b26      	ldr	r3, [pc, #152]	@ (80048c8 <_vfiprintf_r+0x224>)
 8004830:	bb1b      	cbnz	r3, 800487a <_vfiprintf_r+0x1d6>
 8004832:	9b03      	ldr	r3, [sp, #12]
 8004834:	3307      	adds	r3, #7
 8004836:	f023 0307 	bic.w	r3, r3, #7
 800483a:	3308      	adds	r3, #8
 800483c:	9303      	str	r3, [sp, #12]
 800483e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004840:	443b      	add	r3, r7
 8004842:	9309      	str	r3, [sp, #36]	@ 0x24
 8004844:	e76a      	b.n	800471c <_vfiprintf_r+0x78>
 8004846:	fb0c 3202 	mla	r2, ip, r2, r3
 800484a:	460c      	mov	r4, r1
 800484c:	2001      	movs	r0, #1
 800484e:	e7a8      	b.n	80047a2 <_vfiprintf_r+0xfe>
 8004850:	2300      	movs	r3, #0
 8004852:	3401      	adds	r4, #1
 8004854:	9305      	str	r3, [sp, #20]
 8004856:	4619      	mov	r1, r3
 8004858:	f04f 0c0a 	mov.w	ip, #10
 800485c:	4620      	mov	r0, r4
 800485e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004862:	3a30      	subs	r2, #48	@ 0x30
 8004864:	2a09      	cmp	r2, #9
 8004866:	d903      	bls.n	8004870 <_vfiprintf_r+0x1cc>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0c6      	beq.n	80047fa <_vfiprintf_r+0x156>
 800486c:	9105      	str	r1, [sp, #20]
 800486e:	e7c4      	b.n	80047fa <_vfiprintf_r+0x156>
 8004870:	fb0c 2101 	mla	r1, ip, r1, r2
 8004874:	4604      	mov	r4, r0
 8004876:	2301      	movs	r3, #1
 8004878:	e7f0      	b.n	800485c <_vfiprintf_r+0x1b8>
 800487a:	ab03      	add	r3, sp, #12
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	462a      	mov	r2, r5
 8004880:	4b12      	ldr	r3, [pc, #72]	@ (80048cc <_vfiprintf_r+0x228>)
 8004882:	a904      	add	r1, sp, #16
 8004884:	4630      	mov	r0, r6
 8004886:	f3af 8000 	nop.w
 800488a:	4607      	mov	r7, r0
 800488c:	1c78      	adds	r0, r7, #1
 800488e:	d1d6      	bne.n	800483e <_vfiprintf_r+0x19a>
 8004890:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004892:	07d9      	lsls	r1, r3, #31
 8004894:	d405      	bmi.n	80048a2 <_vfiprintf_r+0x1fe>
 8004896:	89ab      	ldrh	r3, [r5, #12]
 8004898:	059a      	lsls	r2, r3, #22
 800489a:	d402      	bmi.n	80048a2 <_vfiprintf_r+0x1fe>
 800489c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800489e:	f7ff fdc9 	bl	8004434 <__retarget_lock_release_recursive>
 80048a2:	89ab      	ldrh	r3, [r5, #12]
 80048a4:	065b      	lsls	r3, r3, #25
 80048a6:	f53f af1f 	bmi.w	80046e8 <_vfiprintf_r+0x44>
 80048aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048ac:	e71e      	b.n	80046ec <_vfiprintf_r+0x48>
 80048ae:	ab03      	add	r3, sp, #12
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	462a      	mov	r2, r5
 80048b4:	4b05      	ldr	r3, [pc, #20]	@ (80048cc <_vfiprintf_r+0x228>)
 80048b6:	a904      	add	r1, sp, #16
 80048b8:	4630      	mov	r0, r6
 80048ba:	f000 f879 	bl	80049b0 <_printf_i>
 80048be:	e7e4      	b.n	800488a <_vfiprintf_r+0x1e6>
 80048c0:	08005305 	.word	0x08005305
 80048c4:	0800530f 	.word	0x0800530f
 80048c8:	00000000 	.word	0x00000000
 80048cc:	0800467f 	.word	0x0800467f
 80048d0:	0800530b 	.word	0x0800530b

080048d4 <_printf_common>:
 80048d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d8:	4616      	mov	r6, r2
 80048da:	4698      	mov	r8, r3
 80048dc:	688a      	ldr	r2, [r1, #8]
 80048de:	690b      	ldr	r3, [r1, #16]
 80048e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048e4:	4293      	cmp	r3, r2
 80048e6:	bfb8      	it	lt
 80048e8:	4613      	movlt	r3, r2
 80048ea:	6033      	str	r3, [r6, #0]
 80048ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048f0:	4607      	mov	r7, r0
 80048f2:	460c      	mov	r4, r1
 80048f4:	b10a      	cbz	r2, 80048fa <_printf_common+0x26>
 80048f6:	3301      	adds	r3, #1
 80048f8:	6033      	str	r3, [r6, #0]
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	0699      	lsls	r1, r3, #26
 80048fe:	bf42      	ittt	mi
 8004900:	6833      	ldrmi	r3, [r6, #0]
 8004902:	3302      	addmi	r3, #2
 8004904:	6033      	strmi	r3, [r6, #0]
 8004906:	6825      	ldr	r5, [r4, #0]
 8004908:	f015 0506 	ands.w	r5, r5, #6
 800490c:	d106      	bne.n	800491c <_printf_common+0x48>
 800490e:	f104 0a19 	add.w	sl, r4, #25
 8004912:	68e3      	ldr	r3, [r4, #12]
 8004914:	6832      	ldr	r2, [r6, #0]
 8004916:	1a9b      	subs	r3, r3, r2
 8004918:	42ab      	cmp	r3, r5
 800491a:	dc26      	bgt.n	800496a <_printf_common+0x96>
 800491c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004920:	6822      	ldr	r2, [r4, #0]
 8004922:	3b00      	subs	r3, #0
 8004924:	bf18      	it	ne
 8004926:	2301      	movne	r3, #1
 8004928:	0692      	lsls	r2, r2, #26
 800492a:	d42b      	bmi.n	8004984 <_printf_common+0xb0>
 800492c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004930:	4641      	mov	r1, r8
 8004932:	4638      	mov	r0, r7
 8004934:	47c8      	blx	r9
 8004936:	3001      	adds	r0, #1
 8004938:	d01e      	beq.n	8004978 <_printf_common+0xa4>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	6922      	ldr	r2, [r4, #16]
 800493e:	f003 0306 	and.w	r3, r3, #6
 8004942:	2b04      	cmp	r3, #4
 8004944:	bf02      	ittt	eq
 8004946:	68e5      	ldreq	r5, [r4, #12]
 8004948:	6833      	ldreq	r3, [r6, #0]
 800494a:	1aed      	subeq	r5, r5, r3
 800494c:	68a3      	ldr	r3, [r4, #8]
 800494e:	bf0c      	ite	eq
 8004950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004954:	2500      	movne	r5, #0
 8004956:	4293      	cmp	r3, r2
 8004958:	bfc4      	itt	gt
 800495a:	1a9b      	subgt	r3, r3, r2
 800495c:	18ed      	addgt	r5, r5, r3
 800495e:	2600      	movs	r6, #0
 8004960:	341a      	adds	r4, #26
 8004962:	42b5      	cmp	r5, r6
 8004964:	d11a      	bne.n	800499c <_printf_common+0xc8>
 8004966:	2000      	movs	r0, #0
 8004968:	e008      	b.n	800497c <_printf_common+0xa8>
 800496a:	2301      	movs	r3, #1
 800496c:	4652      	mov	r2, sl
 800496e:	4641      	mov	r1, r8
 8004970:	4638      	mov	r0, r7
 8004972:	47c8      	blx	r9
 8004974:	3001      	adds	r0, #1
 8004976:	d103      	bne.n	8004980 <_printf_common+0xac>
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004980:	3501      	adds	r5, #1
 8004982:	e7c6      	b.n	8004912 <_printf_common+0x3e>
 8004984:	18e1      	adds	r1, r4, r3
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	2030      	movs	r0, #48	@ 0x30
 800498a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800498e:	4422      	add	r2, r4
 8004990:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004994:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004998:	3302      	adds	r3, #2
 800499a:	e7c7      	b.n	800492c <_printf_common+0x58>
 800499c:	2301      	movs	r3, #1
 800499e:	4622      	mov	r2, r4
 80049a0:	4641      	mov	r1, r8
 80049a2:	4638      	mov	r0, r7
 80049a4:	47c8      	blx	r9
 80049a6:	3001      	adds	r0, #1
 80049a8:	d0e6      	beq.n	8004978 <_printf_common+0xa4>
 80049aa:	3601      	adds	r6, #1
 80049ac:	e7d9      	b.n	8004962 <_printf_common+0x8e>
	...

080049b0 <_printf_i>:
 80049b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049b4:	7e0f      	ldrb	r7, [r1, #24]
 80049b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049b8:	2f78      	cmp	r7, #120	@ 0x78
 80049ba:	4691      	mov	r9, r2
 80049bc:	4680      	mov	r8, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	469a      	mov	sl, r3
 80049c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049c6:	d807      	bhi.n	80049d8 <_printf_i+0x28>
 80049c8:	2f62      	cmp	r7, #98	@ 0x62
 80049ca:	d80a      	bhi.n	80049e2 <_printf_i+0x32>
 80049cc:	2f00      	cmp	r7, #0
 80049ce:	f000 80d2 	beq.w	8004b76 <_printf_i+0x1c6>
 80049d2:	2f58      	cmp	r7, #88	@ 0x58
 80049d4:	f000 80b9 	beq.w	8004b4a <_printf_i+0x19a>
 80049d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049e0:	e03a      	b.n	8004a58 <_printf_i+0xa8>
 80049e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049e6:	2b15      	cmp	r3, #21
 80049e8:	d8f6      	bhi.n	80049d8 <_printf_i+0x28>
 80049ea:	a101      	add	r1, pc, #4	@ (adr r1, 80049f0 <_printf_i+0x40>)
 80049ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049f0:	08004a49 	.word	0x08004a49
 80049f4:	08004a5d 	.word	0x08004a5d
 80049f8:	080049d9 	.word	0x080049d9
 80049fc:	080049d9 	.word	0x080049d9
 8004a00:	080049d9 	.word	0x080049d9
 8004a04:	080049d9 	.word	0x080049d9
 8004a08:	08004a5d 	.word	0x08004a5d
 8004a0c:	080049d9 	.word	0x080049d9
 8004a10:	080049d9 	.word	0x080049d9
 8004a14:	080049d9 	.word	0x080049d9
 8004a18:	080049d9 	.word	0x080049d9
 8004a1c:	08004b5d 	.word	0x08004b5d
 8004a20:	08004a87 	.word	0x08004a87
 8004a24:	08004b17 	.word	0x08004b17
 8004a28:	080049d9 	.word	0x080049d9
 8004a2c:	080049d9 	.word	0x080049d9
 8004a30:	08004b7f 	.word	0x08004b7f
 8004a34:	080049d9 	.word	0x080049d9
 8004a38:	08004a87 	.word	0x08004a87
 8004a3c:	080049d9 	.word	0x080049d9
 8004a40:	080049d9 	.word	0x080049d9
 8004a44:	08004b1f 	.word	0x08004b1f
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	1d1a      	adds	r2, r3, #4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6032      	str	r2, [r6, #0]
 8004a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e09d      	b.n	8004b98 <_printf_i+0x1e8>
 8004a5c:	6833      	ldr	r3, [r6, #0]
 8004a5e:	6820      	ldr	r0, [r4, #0]
 8004a60:	1d19      	adds	r1, r3, #4
 8004a62:	6031      	str	r1, [r6, #0]
 8004a64:	0606      	lsls	r6, r0, #24
 8004a66:	d501      	bpl.n	8004a6c <_printf_i+0xbc>
 8004a68:	681d      	ldr	r5, [r3, #0]
 8004a6a:	e003      	b.n	8004a74 <_printf_i+0xc4>
 8004a6c:	0645      	lsls	r5, r0, #25
 8004a6e:	d5fb      	bpl.n	8004a68 <_printf_i+0xb8>
 8004a70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	da03      	bge.n	8004a80 <_printf_i+0xd0>
 8004a78:	232d      	movs	r3, #45	@ 0x2d
 8004a7a:	426d      	negs	r5, r5
 8004a7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a80:	4859      	ldr	r0, [pc, #356]	@ (8004be8 <_printf_i+0x238>)
 8004a82:	230a      	movs	r3, #10
 8004a84:	e011      	b.n	8004aaa <_printf_i+0xfa>
 8004a86:	6821      	ldr	r1, [r4, #0]
 8004a88:	6833      	ldr	r3, [r6, #0]
 8004a8a:	0608      	lsls	r0, r1, #24
 8004a8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a90:	d402      	bmi.n	8004a98 <_printf_i+0xe8>
 8004a92:	0649      	lsls	r1, r1, #25
 8004a94:	bf48      	it	mi
 8004a96:	b2ad      	uxthmi	r5, r5
 8004a98:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a9a:	4853      	ldr	r0, [pc, #332]	@ (8004be8 <_printf_i+0x238>)
 8004a9c:	6033      	str	r3, [r6, #0]
 8004a9e:	bf14      	ite	ne
 8004aa0:	230a      	movne	r3, #10
 8004aa2:	2308      	moveq	r3, #8
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aaa:	6866      	ldr	r6, [r4, #4]
 8004aac:	60a6      	str	r6, [r4, #8]
 8004aae:	2e00      	cmp	r6, #0
 8004ab0:	bfa2      	ittt	ge
 8004ab2:	6821      	ldrge	r1, [r4, #0]
 8004ab4:	f021 0104 	bicge.w	r1, r1, #4
 8004ab8:	6021      	strge	r1, [r4, #0]
 8004aba:	b90d      	cbnz	r5, 8004ac0 <_printf_i+0x110>
 8004abc:	2e00      	cmp	r6, #0
 8004abe:	d04b      	beq.n	8004b58 <_printf_i+0x1a8>
 8004ac0:	4616      	mov	r6, r2
 8004ac2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ac6:	fb03 5711 	mls	r7, r3, r1, r5
 8004aca:	5dc7      	ldrb	r7, [r0, r7]
 8004acc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ad0:	462f      	mov	r7, r5
 8004ad2:	42bb      	cmp	r3, r7
 8004ad4:	460d      	mov	r5, r1
 8004ad6:	d9f4      	bls.n	8004ac2 <_printf_i+0x112>
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d10b      	bne.n	8004af4 <_printf_i+0x144>
 8004adc:	6823      	ldr	r3, [r4, #0]
 8004ade:	07df      	lsls	r7, r3, #31
 8004ae0:	d508      	bpl.n	8004af4 <_printf_i+0x144>
 8004ae2:	6923      	ldr	r3, [r4, #16]
 8004ae4:	6861      	ldr	r1, [r4, #4]
 8004ae6:	4299      	cmp	r1, r3
 8004ae8:	bfde      	ittt	le
 8004aea:	2330      	movle	r3, #48	@ 0x30
 8004aec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004af0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004af4:	1b92      	subs	r2, r2, r6
 8004af6:	6122      	str	r2, [r4, #16]
 8004af8:	f8cd a000 	str.w	sl, [sp]
 8004afc:	464b      	mov	r3, r9
 8004afe:	aa03      	add	r2, sp, #12
 8004b00:	4621      	mov	r1, r4
 8004b02:	4640      	mov	r0, r8
 8004b04:	f7ff fee6 	bl	80048d4 <_printf_common>
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d14a      	bne.n	8004ba2 <_printf_i+0x1f2>
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	b004      	add	sp, #16
 8004b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b16:	6823      	ldr	r3, [r4, #0]
 8004b18:	f043 0320 	orr.w	r3, r3, #32
 8004b1c:	6023      	str	r3, [r4, #0]
 8004b1e:	4833      	ldr	r0, [pc, #204]	@ (8004bec <_printf_i+0x23c>)
 8004b20:	2778      	movs	r7, #120	@ 0x78
 8004b22:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	6831      	ldr	r1, [r6, #0]
 8004b2a:	061f      	lsls	r7, r3, #24
 8004b2c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b30:	d402      	bmi.n	8004b38 <_printf_i+0x188>
 8004b32:	065f      	lsls	r7, r3, #25
 8004b34:	bf48      	it	mi
 8004b36:	b2ad      	uxthmi	r5, r5
 8004b38:	6031      	str	r1, [r6, #0]
 8004b3a:	07d9      	lsls	r1, r3, #31
 8004b3c:	bf44      	itt	mi
 8004b3e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b42:	6023      	strmi	r3, [r4, #0]
 8004b44:	b11d      	cbz	r5, 8004b4e <_printf_i+0x19e>
 8004b46:	2310      	movs	r3, #16
 8004b48:	e7ac      	b.n	8004aa4 <_printf_i+0xf4>
 8004b4a:	4827      	ldr	r0, [pc, #156]	@ (8004be8 <_printf_i+0x238>)
 8004b4c:	e7e9      	b.n	8004b22 <_printf_i+0x172>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	f023 0320 	bic.w	r3, r3, #32
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	e7f6      	b.n	8004b46 <_printf_i+0x196>
 8004b58:	4616      	mov	r6, r2
 8004b5a:	e7bd      	b.n	8004ad8 <_printf_i+0x128>
 8004b5c:	6833      	ldr	r3, [r6, #0]
 8004b5e:	6825      	ldr	r5, [r4, #0]
 8004b60:	6961      	ldr	r1, [r4, #20]
 8004b62:	1d18      	adds	r0, r3, #4
 8004b64:	6030      	str	r0, [r6, #0]
 8004b66:	062e      	lsls	r6, r5, #24
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	d501      	bpl.n	8004b70 <_printf_i+0x1c0>
 8004b6c:	6019      	str	r1, [r3, #0]
 8004b6e:	e002      	b.n	8004b76 <_printf_i+0x1c6>
 8004b70:	0668      	lsls	r0, r5, #25
 8004b72:	d5fb      	bpl.n	8004b6c <_printf_i+0x1bc>
 8004b74:	8019      	strh	r1, [r3, #0]
 8004b76:	2300      	movs	r3, #0
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	4616      	mov	r6, r2
 8004b7c:	e7bc      	b.n	8004af8 <_printf_i+0x148>
 8004b7e:	6833      	ldr	r3, [r6, #0]
 8004b80:	1d1a      	adds	r2, r3, #4
 8004b82:	6032      	str	r2, [r6, #0]
 8004b84:	681e      	ldr	r6, [r3, #0]
 8004b86:	6862      	ldr	r2, [r4, #4]
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	f7fb fb20 	bl	80001d0 <memchr>
 8004b90:	b108      	cbz	r0, 8004b96 <_printf_i+0x1e6>
 8004b92:	1b80      	subs	r0, r0, r6
 8004b94:	6060      	str	r0, [r4, #4]
 8004b96:	6863      	ldr	r3, [r4, #4]
 8004b98:	6123      	str	r3, [r4, #16]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ba0:	e7aa      	b.n	8004af8 <_printf_i+0x148>
 8004ba2:	6923      	ldr	r3, [r4, #16]
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	4640      	mov	r0, r8
 8004baa:	47d0      	blx	sl
 8004bac:	3001      	adds	r0, #1
 8004bae:	d0ad      	beq.n	8004b0c <_printf_i+0x15c>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	079b      	lsls	r3, r3, #30
 8004bb4:	d413      	bmi.n	8004bde <_printf_i+0x22e>
 8004bb6:	68e0      	ldr	r0, [r4, #12]
 8004bb8:	9b03      	ldr	r3, [sp, #12]
 8004bba:	4298      	cmp	r0, r3
 8004bbc:	bfb8      	it	lt
 8004bbe:	4618      	movlt	r0, r3
 8004bc0:	e7a6      	b.n	8004b10 <_printf_i+0x160>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4640      	mov	r0, r8
 8004bca:	47d0      	blx	sl
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d09d      	beq.n	8004b0c <_printf_i+0x15c>
 8004bd0:	3501      	adds	r5, #1
 8004bd2:	68e3      	ldr	r3, [r4, #12]
 8004bd4:	9903      	ldr	r1, [sp, #12]
 8004bd6:	1a5b      	subs	r3, r3, r1
 8004bd8:	42ab      	cmp	r3, r5
 8004bda:	dcf2      	bgt.n	8004bc2 <_printf_i+0x212>
 8004bdc:	e7eb      	b.n	8004bb6 <_printf_i+0x206>
 8004bde:	2500      	movs	r5, #0
 8004be0:	f104 0619 	add.w	r6, r4, #25
 8004be4:	e7f5      	b.n	8004bd2 <_printf_i+0x222>
 8004be6:	bf00      	nop
 8004be8:	08005316 	.word	0x08005316
 8004bec:	08005327 	.word	0x08005327

08004bf0 <__sflush_r>:
 8004bf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf8:	0716      	lsls	r6, r2, #28
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	d454      	bmi.n	8004caa <__sflush_r+0xba>
 8004c00:	684b      	ldr	r3, [r1, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	dc02      	bgt.n	8004c0c <__sflush_r+0x1c>
 8004c06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	dd48      	ble.n	8004c9e <__sflush_r+0xae>
 8004c0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c0e:	2e00      	cmp	r6, #0
 8004c10:	d045      	beq.n	8004c9e <__sflush_r+0xae>
 8004c12:	2300      	movs	r3, #0
 8004c14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c18:	682f      	ldr	r7, [r5, #0]
 8004c1a:	6a21      	ldr	r1, [r4, #32]
 8004c1c:	602b      	str	r3, [r5, #0]
 8004c1e:	d030      	beq.n	8004c82 <__sflush_r+0x92>
 8004c20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c22:	89a3      	ldrh	r3, [r4, #12]
 8004c24:	0759      	lsls	r1, r3, #29
 8004c26:	d505      	bpl.n	8004c34 <__sflush_r+0x44>
 8004c28:	6863      	ldr	r3, [r4, #4]
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c2e:	b10b      	cbz	r3, 8004c34 <__sflush_r+0x44>
 8004c30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c32:	1ad2      	subs	r2, r2, r3
 8004c34:	2300      	movs	r3, #0
 8004c36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c38:	6a21      	ldr	r1, [r4, #32]
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b0      	blx	r6
 8004c3e:	1c43      	adds	r3, r0, #1
 8004c40:	89a3      	ldrh	r3, [r4, #12]
 8004c42:	d106      	bne.n	8004c52 <__sflush_r+0x62>
 8004c44:	6829      	ldr	r1, [r5, #0]
 8004c46:	291d      	cmp	r1, #29
 8004c48:	d82b      	bhi.n	8004ca2 <__sflush_r+0xb2>
 8004c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8004cf4 <__sflush_r+0x104>)
 8004c4c:	410a      	asrs	r2, r1
 8004c4e:	07d6      	lsls	r6, r2, #31
 8004c50:	d427      	bmi.n	8004ca2 <__sflush_r+0xb2>
 8004c52:	2200      	movs	r2, #0
 8004c54:	6062      	str	r2, [r4, #4]
 8004c56:	04d9      	lsls	r1, r3, #19
 8004c58:	6922      	ldr	r2, [r4, #16]
 8004c5a:	6022      	str	r2, [r4, #0]
 8004c5c:	d504      	bpl.n	8004c68 <__sflush_r+0x78>
 8004c5e:	1c42      	adds	r2, r0, #1
 8004c60:	d101      	bne.n	8004c66 <__sflush_r+0x76>
 8004c62:	682b      	ldr	r3, [r5, #0]
 8004c64:	b903      	cbnz	r3, 8004c68 <__sflush_r+0x78>
 8004c66:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c6a:	602f      	str	r7, [r5, #0]
 8004c6c:	b1b9      	cbz	r1, 8004c9e <__sflush_r+0xae>
 8004c6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c72:	4299      	cmp	r1, r3
 8004c74:	d002      	beq.n	8004c7c <__sflush_r+0x8c>
 8004c76:	4628      	mov	r0, r5
 8004c78:	f7ff fbf2 	bl	8004460 <_free_r>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c80:	e00d      	b.n	8004c9e <__sflush_r+0xae>
 8004c82:	2301      	movs	r3, #1
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b0      	blx	r6
 8004c88:	4602      	mov	r2, r0
 8004c8a:	1c50      	adds	r0, r2, #1
 8004c8c:	d1c9      	bne.n	8004c22 <__sflush_r+0x32>
 8004c8e:	682b      	ldr	r3, [r5, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0c6      	beq.n	8004c22 <__sflush_r+0x32>
 8004c94:	2b1d      	cmp	r3, #29
 8004c96:	d001      	beq.n	8004c9c <__sflush_r+0xac>
 8004c98:	2b16      	cmp	r3, #22
 8004c9a:	d11e      	bne.n	8004cda <__sflush_r+0xea>
 8004c9c:	602f      	str	r7, [r5, #0]
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e022      	b.n	8004ce8 <__sflush_r+0xf8>
 8004ca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ca6:	b21b      	sxth	r3, r3
 8004ca8:	e01b      	b.n	8004ce2 <__sflush_r+0xf2>
 8004caa:	690f      	ldr	r7, [r1, #16]
 8004cac:	2f00      	cmp	r7, #0
 8004cae:	d0f6      	beq.n	8004c9e <__sflush_r+0xae>
 8004cb0:	0793      	lsls	r3, r2, #30
 8004cb2:	680e      	ldr	r6, [r1, #0]
 8004cb4:	bf08      	it	eq
 8004cb6:	694b      	ldreq	r3, [r1, #20]
 8004cb8:	600f      	str	r7, [r1, #0]
 8004cba:	bf18      	it	ne
 8004cbc:	2300      	movne	r3, #0
 8004cbe:	eba6 0807 	sub.w	r8, r6, r7
 8004cc2:	608b      	str	r3, [r1, #8]
 8004cc4:	f1b8 0f00 	cmp.w	r8, #0
 8004cc8:	dde9      	ble.n	8004c9e <__sflush_r+0xae>
 8004cca:	6a21      	ldr	r1, [r4, #32]
 8004ccc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004cce:	4643      	mov	r3, r8
 8004cd0:	463a      	mov	r2, r7
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	47b0      	blx	r6
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	dc08      	bgt.n	8004cec <__sflush_r+0xfc>
 8004cda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cec:	4407      	add	r7, r0
 8004cee:	eba8 0800 	sub.w	r8, r8, r0
 8004cf2:	e7e7      	b.n	8004cc4 <__sflush_r+0xd4>
 8004cf4:	dfbffffe 	.word	0xdfbffffe

08004cf8 <_fflush_r>:
 8004cf8:	b538      	push	{r3, r4, r5, lr}
 8004cfa:	690b      	ldr	r3, [r1, #16]
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	b913      	cbnz	r3, 8004d08 <_fflush_r+0x10>
 8004d02:	2500      	movs	r5, #0
 8004d04:	4628      	mov	r0, r5
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	b118      	cbz	r0, 8004d12 <_fflush_r+0x1a>
 8004d0a:	6a03      	ldr	r3, [r0, #32]
 8004d0c:	b90b      	cbnz	r3, 8004d12 <_fflush_r+0x1a>
 8004d0e:	f7ff fa8b 	bl	8004228 <__sinit>
 8004d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f3      	beq.n	8004d02 <_fflush_r+0xa>
 8004d1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d1c:	07d0      	lsls	r0, r2, #31
 8004d1e:	d404      	bmi.n	8004d2a <_fflush_r+0x32>
 8004d20:	0599      	lsls	r1, r3, #22
 8004d22:	d402      	bmi.n	8004d2a <_fflush_r+0x32>
 8004d24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d26:	f7ff fb84 	bl	8004432 <__retarget_lock_acquire_recursive>
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	4621      	mov	r1, r4
 8004d2e:	f7ff ff5f 	bl	8004bf0 <__sflush_r>
 8004d32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d34:	07da      	lsls	r2, r3, #31
 8004d36:	4605      	mov	r5, r0
 8004d38:	d4e4      	bmi.n	8004d04 <_fflush_r+0xc>
 8004d3a:	89a3      	ldrh	r3, [r4, #12]
 8004d3c:	059b      	lsls	r3, r3, #22
 8004d3e:	d4e1      	bmi.n	8004d04 <_fflush_r+0xc>
 8004d40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d42:	f7ff fb77 	bl	8004434 <__retarget_lock_release_recursive>
 8004d46:	e7dd      	b.n	8004d04 <_fflush_r+0xc>

08004d48 <__swbuf_r>:
 8004d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4a:	460e      	mov	r6, r1
 8004d4c:	4614      	mov	r4, r2
 8004d4e:	4605      	mov	r5, r0
 8004d50:	b118      	cbz	r0, 8004d5a <__swbuf_r+0x12>
 8004d52:	6a03      	ldr	r3, [r0, #32]
 8004d54:	b90b      	cbnz	r3, 8004d5a <__swbuf_r+0x12>
 8004d56:	f7ff fa67 	bl	8004228 <__sinit>
 8004d5a:	69a3      	ldr	r3, [r4, #24]
 8004d5c:	60a3      	str	r3, [r4, #8]
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	071a      	lsls	r2, r3, #28
 8004d62:	d501      	bpl.n	8004d68 <__swbuf_r+0x20>
 8004d64:	6923      	ldr	r3, [r4, #16]
 8004d66:	b943      	cbnz	r3, 8004d7a <__swbuf_r+0x32>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 f82a 	bl	8004dc4 <__swsetup_r>
 8004d70:	b118      	cbz	r0, 8004d7a <__swbuf_r+0x32>
 8004d72:	f04f 37ff 	mov.w	r7, #4294967295
 8004d76:	4638      	mov	r0, r7
 8004d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	6922      	ldr	r2, [r4, #16]
 8004d7e:	1a98      	subs	r0, r3, r2
 8004d80:	6963      	ldr	r3, [r4, #20]
 8004d82:	b2f6      	uxtb	r6, r6
 8004d84:	4283      	cmp	r3, r0
 8004d86:	4637      	mov	r7, r6
 8004d88:	dc05      	bgt.n	8004d96 <__swbuf_r+0x4e>
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	f7ff ffb3 	bl	8004cf8 <_fflush_r>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d1ed      	bne.n	8004d72 <__swbuf_r+0x2a>
 8004d96:	68a3      	ldr	r3, [r4, #8]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	60a3      	str	r3, [r4, #8]
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	6022      	str	r2, [r4, #0]
 8004da2:	701e      	strb	r6, [r3, #0]
 8004da4:	6962      	ldr	r2, [r4, #20]
 8004da6:	1c43      	adds	r3, r0, #1
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d004      	beq.n	8004db6 <__swbuf_r+0x6e>
 8004dac:	89a3      	ldrh	r3, [r4, #12]
 8004dae:	07db      	lsls	r3, r3, #31
 8004db0:	d5e1      	bpl.n	8004d76 <__swbuf_r+0x2e>
 8004db2:	2e0a      	cmp	r6, #10
 8004db4:	d1df      	bne.n	8004d76 <__swbuf_r+0x2e>
 8004db6:	4621      	mov	r1, r4
 8004db8:	4628      	mov	r0, r5
 8004dba:	f7ff ff9d 	bl	8004cf8 <_fflush_r>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d0d9      	beq.n	8004d76 <__swbuf_r+0x2e>
 8004dc2:	e7d6      	b.n	8004d72 <__swbuf_r+0x2a>

08004dc4 <__swsetup_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4b29      	ldr	r3, [pc, #164]	@ (8004e6c <__swsetup_r+0xa8>)
 8004dc8:	4605      	mov	r5, r0
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	460c      	mov	r4, r1
 8004dce:	b118      	cbz	r0, 8004dd8 <__swsetup_r+0x14>
 8004dd0:	6a03      	ldr	r3, [r0, #32]
 8004dd2:	b90b      	cbnz	r3, 8004dd8 <__swsetup_r+0x14>
 8004dd4:	f7ff fa28 	bl	8004228 <__sinit>
 8004dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ddc:	0719      	lsls	r1, r3, #28
 8004dde:	d422      	bmi.n	8004e26 <__swsetup_r+0x62>
 8004de0:	06da      	lsls	r2, r3, #27
 8004de2:	d407      	bmi.n	8004df4 <__swsetup_r+0x30>
 8004de4:	2209      	movs	r2, #9
 8004de6:	602a      	str	r2, [r5, #0]
 8004de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dec:	81a3      	strh	r3, [r4, #12]
 8004dee:	f04f 30ff 	mov.w	r0, #4294967295
 8004df2:	e033      	b.n	8004e5c <__swsetup_r+0x98>
 8004df4:	0758      	lsls	r0, r3, #29
 8004df6:	d512      	bpl.n	8004e1e <__swsetup_r+0x5a>
 8004df8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004dfa:	b141      	cbz	r1, 8004e0e <__swsetup_r+0x4a>
 8004dfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e00:	4299      	cmp	r1, r3
 8004e02:	d002      	beq.n	8004e0a <__swsetup_r+0x46>
 8004e04:	4628      	mov	r0, r5
 8004e06:	f7ff fb2b 	bl	8004460 <_free_r>
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	2300      	movs	r3, #0
 8004e18:	6063      	str	r3, [r4, #4]
 8004e1a:	6923      	ldr	r3, [r4, #16]
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	89a3      	ldrh	r3, [r4, #12]
 8004e20:	f043 0308 	orr.w	r3, r3, #8
 8004e24:	81a3      	strh	r3, [r4, #12]
 8004e26:	6923      	ldr	r3, [r4, #16]
 8004e28:	b94b      	cbnz	r3, 8004e3e <__swsetup_r+0x7a>
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e34:	d003      	beq.n	8004e3e <__swsetup_r+0x7a>
 8004e36:	4621      	mov	r1, r4
 8004e38:	4628      	mov	r0, r5
 8004e3a:	f000 f893 	bl	8004f64 <__smakebuf_r>
 8004e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e42:	f013 0201 	ands.w	r2, r3, #1
 8004e46:	d00a      	beq.n	8004e5e <__swsetup_r+0x9a>
 8004e48:	2200      	movs	r2, #0
 8004e4a:	60a2      	str	r2, [r4, #8]
 8004e4c:	6962      	ldr	r2, [r4, #20]
 8004e4e:	4252      	negs	r2, r2
 8004e50:	61a2      	str	r2, [r4, #24]
 8004e52:	6922      	ldr	r2, [r4, #16]
 8004e54:	b942      	cbnz	r2, 8004e68 <__swsetup_r+0xa4>
 8004e56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e5a:	d1c5      	bne.n	8004de8 <__swsetup_r+0x24>
 8004e5c:	bd38      	pop	{r3, r4, r5, pc}
 8004e5e:	0799      	lsls	r1, r3, #30
 8004e60:	bf58      	it	pl
 8004e62:	6962      	ldrpl	r2, [r4, #20]
 8004e64:	60a2      	str	r2, [r4, #8]
 8004e66:	e7f4      	b.n	8004e52 <__swsetup_r+0x8e>
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e7f7      	b.n	8004e5c <__swsetup_r+0x98>
 8004e6c:	20000018 	.word	0x20000018

08004e70 <_raise_r>:
 8004e70:	291f      	cmp	r1, #31
 8004e72:	b538      	push	{r3, r4, r5, lr}
 8004e74:	4605      	mov	r5, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	d904      	bls.n	8004e84 <_raise_r+0x14>
 8004e7a:	2316      	movs	r3, #22
 8004e7c:	6003      	str	r3, [r0, #0]
 8004e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004e86:	b112      	cbz	r2, 8004e8e <_raise_r+0x1e>
 8004e88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004e8c:	b94b      	cbnz	r3, 8004ea2 <_raise_r+0x32>
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 f830 	bl	8004ef4 <_getpid_r>
 8004e94:	4622      	mov	r2, r4
 8004e96:	4601      	mov	r1, r0
 8004e98:	4628      	mov	r0, r5
 8004e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e9e:	f000 b817 	b.w	8004ed0 <_kill_r>
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d00a      	beq.n	8004ebc <_raise_r+0x4c>
 8004ea6:	1c59      	adds	r1, r3, #1
 8004ea8:	d103      	bne.n	8004eb2 <_raise_r+0x42>
 8004eaa:	2316      	movs	r3, #22
 8004eac:	6003      	str	r3, [r0, #0]
 8004eae:	2001      	movs	r0, #1
 8004eb0:	e7e7      	b.n	8004e82 <_raise_r+0x12>
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004eb8:	4620      	mov	r0, r4
 8004eba:	4798      	blx	r3
 8004ebc:	2000      	movs	r0, #0
 8004ebe:	e7e0      	b.n	8004e82 <_raise_r+0x12>

08004ec0 <raise>:
 8004ec0:	4b02      	ldr	r3, [pc, #8]	@ (8004ecc <raise+0xc>)
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	f7ff bfd3 	b.w	8004e70 <_raise_r>
 8004eca:	bf00      	nop
 8004ecc:	20000018 	.word	0x20000018

08004ed0 <_kill_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4d07      	ldr	r5, [pc, #28]	@ (8004ef0 <_kill_r+0x20>)
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	4608      	mov	r0, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	602b      	str	r3, [r5, #0]
 8004ede:	f7fb fb6b 	bl	80005b8 <_kill>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	d102      	bne.n	8004eec <_kill_r+0x1c>
 8004ee6:	682b      	ldr	r3, [r5, #0]
 8004ee8:	b103      	cbz	r3, 8004eec <_kill_r+0x1c>
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	bd38      	pop	{r3, r4, r5, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000290 	.word	0x20000290

08004ef4 <_getpid_r>:
 8004ef4:	f7fb bb58 	b.w	80005a8 <_getpid>

08004ef8 <_sbrk_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d06      	ldr	r5, [pc, #24]	@ (8004f14 <_sbrk_r+0x1c>)
 8004efc:	2300      	movs	r3, #0
 8004efe:	4604      	mov	r4, r0
 8004f00:	4608      	mov	r0, r1
 8004f02:	602b      	str	r3, [r5, #0]
 8004f04:	f7fb fbe0 	bl	80006c8 <_sbrk>
 8004f08:	1c43      	adds	r3, r0, #1
 8004f0a:	d102      	bne.n	8004f12 <_sbrk_r+0x1a>
 8004f0c:	682b      	ldr	r3, [r5, #0]
 8004f0e:	b103      	cbz	r3, 8004f12 <_sbrk_r+0x1a>
 8004f10:	6023      	str	r3, [r4, #0]
 8004f12:	bd38      	pop	{r3, r4, r5, pc}
 8004f14:	20000290 	.word	0x20000290

08004f18 <__swhatbuf_r>:
 8004f18:	b570      	push	{r4, r5, r6, lr}
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f20:	2900      	cmp	r1, #0
 8004f22:	b096      	sub	sp, #88	@ 0x58
 8004f24:	4615      	mov	r5, r2
 8004f26:	461e      	mov	r6, r3
 8004f28:	da0d      	bge.n	8004f46 <__swhatbuf_r+0x2e>
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f30:	f04f 0100 	mov.w	r1, #0
 8004f34:	bf14      	ite	ne
 8004f36:	2340      	movne	r3, #64	@ 0x40
 8004f38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	6031      	str	r1, [r6, #0]
 8004f40:	602b      	str	r3, [r5, #0]
 8004f42:	b016      	add	sp, #88	@ 0x58
 8004f44:	bd70      	pop	{r4, r5, r6, pc}
 8004f46:	466a      	mov	r2, sp
 8004f48:	f000 f848 	bl	8004fdc <_fstat_r>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	dbec      	blt.n	8004f2a <__swhatbuf_r+0x12>
 8004f50:	9901      	ldr	r1, [sp, #4]
 8004f52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f5a:	4259      	negs	r1, r3
 8004f5c:	4159      	adcs	r1, r3
 8004f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f62:	e7eb      	b.n	8004f3c <__swhatbuf_r+0x24>

08004f64 <__smakebuf_r>:
 8004f64:	898b      	ldrh	r3, [r1, #12]
 8004f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f68:	079d      	lsls	r5, r3, #30
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	d507      	bpl.n	8004f80 <__smakebuf_r+0x1c>
 8004f70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f74:	6023      	str	r3, [r4, #0]
 8004f76:	6123      	str	r3, [r4, #16]
 8004f78:	2301      	movs	r3, #1
 8004f7a:	6163      	str	r3, [r4, #20]
 8004f7c:	b003      	add	sp, #12
 8004f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f80:	ab01      	add	r3, sp, #4
 8004f82:	466a      	mov	r2, sp
 8004f84:	f7ff ffc8 	bl	8004f18 <__swhatbuf_r>
 8004f88:	9f00      	ldr	r7, [sp, #0]
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	4639      	mov	r1, r7
 8004f8e:	4630      	mov	r0, r6
 8004f90:	f7ff fad2 	bl	8004538 <_malloc_r>
 8004f94:	b948      	cbnz	r0, 8004faa <__smakebuf_r+0x46>
 8004f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f9a:	059a      	lsls	r2, r3, #22
 8004f9c:	d4ee      	bmi.n	8004f7c <__smakebuf_r+0x18>
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	f043 0302 	orr.w	r3, r3, #2
 8004fa6:	81a3      	strh	r3, [r4, #12]
 8004fa8:	e7e2      	b.n	8004f70 <__smakebuf_r+0xc>
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	6020      	str	r0, [r4, #0]
 8004fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fb2:	81a3      	strh	r3, [r4, #12]
 8004fb4:	9b01      	ldr	r3, [sp, #4]
 8004fb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fba:	b15b      	cbz	r3, 8004fd4 <__smakebuf_r+0x70>
 8004fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	f000 f81d 	bl	8005000 <_isatty_r>
 8004fc6:	b128      	cbz	r0, 8004fd4 <__smakebuf_r+0x70>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	89a3      	ldrh	r3, [r4, #12]
 8004fd6:	431d      	orrs	r5, r3
 8004fd8:	81a5      	strh	r5, [r4, #12]
 8004fda:	e7cf      	b.n	8004f7c <__smakebuf_r+0x18>

08004fdc <_fstat_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4d07      	ldr	r5, [pc, #28]	@ (8004ffc <_fstat_r+0x20>)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	4611      	mov	r1, r2
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	f7fb fb45 	bl	8000678 <_fstat>
 8004fee:	1c43      	adds	r3, r0, #1
 8004ff0:	d102      	bne.n	8004ff8 <_fstat_r+0x1c>
 8004ff2:	682b      	ldr	r3, [r5, #0]
 8004ff4:	b103      	cbz	r3, 8004ff8 <_fstat_r+0x1c>
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	bd38      	pop	{r3, r4, r5, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000290 	.word	0x20000290

08005000 <_isatty_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4d06      	ldr	r5, [pc, #24]	@ (800501c <_isatty_r+0x1c>)
 8005004:	2300      	movs	r3, #0
 8005006:	4604      	mov	r4, r0
 8005008:	4608      	mov	r0, r1
 800500a:	602b      	str	r3, [r5, #0]
 800500c:	f7fb fb44 	bl	8000698 <_isatty>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_isatty_r+0x1a>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	b103      	cbz	r3, 800501a <_isatty_r+0x1a>
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	20000290 	.word	0x20000290

08005020 <_init>:
 8005020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005022:	bf00      	nop
 8005024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005026:	bc08      	pop	{r3}
 8005028:	469e      	mov	lr, r3
 800502a:	4770      	bx	lr

0800502c <_fini>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr
